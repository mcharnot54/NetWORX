"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_data-validator_ts";
exports.ids = ["_rsc_lib_data-validator_ts"];
exports.modules = {

/***/ "(rsc)/./lib/adaptive-data-validator.ts":
/*!****************************************!*\
  !*** ./lib/adaptive-data-validator.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdaptiveDataValidator: () => (/* binding */ AdaptiveDataValidator)\n/* harmony export */ });\n// Enhanced Data Validator with Adaptive Template System\n// This system learns from uploaded files and creates flexible mappings\nclass AdaptiveDataValidator {\n    static{\n        // Comprehensive keyword patterns for different business data types\n        this.COLUMN_PATTERNS = {\n            // Geographic/Location patterns\n            geographic: [\n                \"state\",\n                \"region\",\n                \"city\",\n                \"zip\",\n                \"postal\",\n                \"country\",\n                \"location\",\n                \"address\",\n                \"facility\",\n                \"warehouse\",\n                \"dc\",\n                \"distribution\",\n                \"center\",\n                \"site\",\n                \"branch\"\n            ],\n            // Financial patterns\n            financial: [\n                \"cost\",\n                \"price\",\n                \"amount\",\n                \"revenue\",\n                \"sales\",\n                \"expense\",\n                \"budget\",\n                \"profit\",\n                \"total\",\n                \"value\",\n                \"dollar\",\n                \"usd\",\n                \"currency\",\n                \"invoice\",\n                \"payment\",\n                \"billing\"\n            ],\n            // Quantity/Volume patterns\n            quantity: [\n                \"quantity\",\n                \"qty\",\n                \"count\",\n                \"volume\",\n                \"units\",\n                \"pieces\",\n                \"each\",\n                \"tons\",\n                \"pounds\",\n                \"kg\",\n                \"weight\",\n                \"capacity\",\n                \"throughput\",\n                \"demand\"\n            ],\n            // Performance/Metrics patterns\n            performance: [\n                \"percentage\",\n                \"percent\",\n                \"ratio\",\n                \"rate\",\n                \"accuracy\",\n                \"efficiency\",\n                \"utilization\",\n                \"performance\",\n                \"metric\",\n                \"kpi\",\n                \"score\",\n                \"index\",\n                \"otd\",\n                \"delivery\"\n            ],\n            // Date/Time patterns\n            temporal: [\n                \"date\",\n                \"time\",\n                \"year\",\n                \"month\",\n                \"week\",\n                \"day\",\n                \"period\",\n                \"quarter\",\n                \"created\",\n                \"updated\",\n                \"modified\",\n                \"start\",\n                \"end\",\n                \"due\"\n            ],\n            // Identifier patterns\n            identifier: [\n                \"id\",\n                \"number\",\n                \"code\",\n                \"ref\",\n                \"reference\",\n                \"sku\",\n                \"part\",\n                \"item\",\n                \"order\",\n                \"invoice\",\n                \"po\",\n                \"tracking\",\n                \"serial\"\n            ],\n            // Name/Description patterns\n            descriptive: [\n                \"name\",\n                \"description\",\n                \"title\",\n                \"label\",\n                \"category\",\n                \"type\",\n                \"class\",\n                \"group\",\n                \"segment\",\n                \"channel\",\n                \"method\",\n                \"mode\"\n            ],\n            // Operational specific patterns\n            operational: [\n                \"shipment\",\n                \"freight\",\n                \"carrier\",\n                \"route\",\n                \"delivery\",\n                \"receiving\",\n                \"inventory\",\n                \"stock\",\n                \"fulfillment\",\n                \"processing\",\n                \"handling\"\n            ]\n        };\n    }\n    static{\n        // Business context mappings for categorization\n        this.BUSINESS_CONTEXTS = {\n            networkFootprint: [\n                \"facility\",\n                \"warehouse\",\n                \"dc\",\n                \"capacity\",\n                \"sqft\",\n                \"space\",\n                \"dock\",\n                \"doors\"\n            ],\n            orderManagement: [\n                \"order\",\n                \"customer\",\n                \"shipment\",\n                \"delivery\",\n                \"fulfillment\"\n            ],\n            inventory: [\n                \"inventory\",\n                \"stock\",\n                \"sku\",\n                \"units\",\n                \"throughput\",\n                \"turns\"\n            ],\n            financialOperations: [\n                \"cost\",\n                \"expense\",\n                \"budget\",\n                \"revenue\",\n                \"profit\",\n                \"pricing\"\n            ],\n            salesGrowth: [\n                \"sales\",\n                \"growth\",\n                \"forecast\",\n                \"demand\",\n                \"projection\",\n                \"historical\"\n            ],\n            performance: [\n                \"accuracy\",\n                \"efficiency\",\n                \"otd\",\n                \"quality\",\n                \"utilization\",\n                \"metrics\"\n            ]\n        };\n    }\n    /**\n   * Analyze column structure and content to understand data patterns\n   */ static analyzeColumns(data) {\n        if (!data || data.length === 0) return [];\n        const columns = Object.keys(data[0] || {});\n        const analyses = [];\n        for (const columnName of columns){\n            const values = data.map((row)=>row[columnName]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n            const sampleValues = values.slice(0, Math.min(10, values.length));\n            const nullCount = data.length - values.length;\n            // Type detection\n            const detectedType = this.detectColumnType(values);\n            // Pattern analysis\n            const patternAnalysis = this.analyzeColumnPatterns(columnName, sampleValues);\n            analyses.push({\n                columnName,\n                sampleValues,\n                detectedType,\n                nullCount,\n                uniqueValues: new Set(values).size,\n                avgLength: this.calculateAverageLength(values),\n                containsNumbers: this.containsNumbers(values),\n                containsDates: this.containsDates(values),\n                patternAnalysis\n            });\n        }\n        return analyses;\n    }\n    /**\n   * Create adaptive template from file analysis\n   */ static createAdaptiveTemplate(fileName, data, columnAnalysis) {\n        const dataPatterns = this.detectDataPatterns(columnAnalysis);\n        const suggestedMappings = this.generateColumnMappings(columnAnalysis, fileName);\n        // Calculate overall confidence based on pattern matches\n        const confidence = this.calculateTemplateConfidence(suggestedMappings);\n        return {\n            id: `adaptive_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            name: `Adaptive Template for ${fileName}`,\n            description: `Auto-generated template based on analysis of ${fileName}`,\n            confidence,\n            sourceFileName: fileName,\n            columnAnalysis,\n            suggestedMappings,\n            dataPatterns\n        };\n    }\n    /**\n   * Process data using adaptive template with flexible validation\n   */ static processWithAdaptiveTemplate(data, adaptiveTemplate) {\n        const errors = [];\n        const warnings = [];\n        const validationResults = [];\n        const processedData = [];\n        let validRows = 0;\n        let skippedRows = 0;\n        // Group mappings by target category\n        const mappingsByCategory = this.groupMappingsByCategory(adaptiveTemplate.suggestedMappings);\n        for(let rowIndex = 0; rowIndex < data.length; rowIndex++){\n            const row = data[rowIndex];\n            const processedRow = {};\n            let isValidRow = true;\n            let hasAnyData = false;\n            // Process each mapping with flexible validation\n            for (const mapping of adaptiveTemplate.suggestedMappings){\n                const sourceValue = row[mapping.sourceColumn];\n                if (sourceValue !== null && sourceValue !== undefined && sourceValue !== \"\") {\n                    hasAnyData = true;\n                    // Flexible validation - attempt to clean and convert data\n                    const cleanedValue = this.cleanValue(sourceValue, mapping.targetField);\n                    const validation = this.flexibleValidation(cleanedValue, mapping);\n                    validationResults.push(validation);\n                    if (!validation.isValid) {\n                        warnings.push(`Row ${rowIndex + 1}, Field '${mapping.targetField}': ${validation.errorMessage}`);\n                    // Don't mark row as invalid for minor issues, just log warning\n                    } else {\n                        processedRow[mapping.targetField] = validation.value;\n                    }\n                }\n            }\n            // Only skip rows that have no useful data at all\n            if (!hasAnyData) {\n                skippedRows++;\n                continue;\n            }\n            if (isValidRow || Object.keys(processedRow).length > 0) {\n                processedData.push(processedRow);\n                validRows++;\n            } else {\n                skippedRows++;\n            }\n        }\n        // Build comprehensive data structure\n        const comprehensiveData = this.buildComprehensiveData(processedData, mappingsByCategory);\n        // Calculate flexible data quality metrics\n        const dataQuality = this.calculateFlexibleDataQuality(data, validationResults, adaptiveTemplate);\n        return {\n            success: validRows > 0,\n            data: comprehensiveData,\n            errors,\n            warnings,\n            summary: {\n                totalRows: data.length,\n                validRows,\n                skippedRows,\n                dataQuality\n            }\n        };\n    }\n    // Helper methods for data analysis\n    static detectColumnType(values) {\n        if (values.length === 0) return \"string\";\n        const types = new Set();\n        for (const value of values.slice(0, 20)){\n            if (typeof value === \"number\" || !isNaN(Number(value)) && !isNaN(parseFloat(value))) {\n                types.add(\"number\");\n            } else if (this.isDateLike(value)) {\n                types.add(\"date\");\n            } else if (typeof value === \"boolean\" || [\n                \"true\",\n                \"false\",\n                \"1\",\n                \"0\",\n                \"yes\",\n                \"no\"\n            ].includes(String(value).toLowerCase())) {\n                types.add(\"boolean\");\n            } else {\n                types.add(\"string\");\n            }\n        }\n        if (types.size > 1) return \"mixed\";\n        return Array.from(types)[0];\n    }\n    static analyzeColumnPatterns(columnName, sampleValues) {\n        const name = columnName.toLowerCase();\n        return {\n            likelyId: this.matchesPatterns(name, this.COLUMN_PATTERNS.identifier),\n            likelyName: this.matchesPatterns(name, this.COLUMN_PATTERNS.descriptive),\n            likelyAddress: this.matchesPatterns(name, this.COLUMN_PATTERNS.geographic),\n            likelyAmount: this.matchesPatterns(name, this.COLUMN_PATTERNS.financial),\n            likelyDate: this.matchesPatterns(name, this.COLUMN_PATTERNS.temporal) || this.containsDates(sampleValues),\n            likelyCategory: this.matchesPatterns(name, this.COLUMN_PATTERNS.descriptive),\n            likelyQuantity: this.matchesPatterns(name, this.COLUMN_PATTERNS.quantity),\n            likelyPercentage: name.includes(\"percent\") || name.includes(\"%\") || sampleValues.some((v)=>String(v).includes(\"%\"))\n        };\n    }\n    static matchesPatterns(text, patterns) {\n        return patterns.some((pattern)=>text.includes(pattern));\n    }\n    static detectDataPatterns(columnAnalysis) {\n        const columns = columnAnalysis.map((c)=>c.columnName.toLowerCase()).join(\" \");\n        return {\n            hasGeographicData: this.matchesPatterns(columns, this.COLUMN_PATTERNS.geographic),\n            hasFinancialData: this.matchesPatterns(columns, this.COLUMN_PATTERNS.financial),\n            hasDateSequences: columnAnalysis.some((c)=>c.patternAnalysis.likelyDate),\n            hasQuantities: this.matchesPatterns(columns, this.COLUMN_PATTERNS.quantity),\n            hasCategories: this.matchesPatterns(columns, this.COLUMN_PATTERNS.descriptive),\n            hasPerformanceMetrics: this.matchesPatterns(columns, this.COLUMN_PATTERNS.performance)\n        };\n    }\n    static generateColumnMappings(columnAnalysis, fileName) {\n        const mappings = [];\n        for (const column of columnAnalysis){\n            const mapping = this.inferColumnMapping(column, fileName);\n            if (mapping) {\n                mappings.push(mapping);\n            }\n        }\n        return mappings;\n    }\n    static inferColumnMapping(column, fileName) {\n        const name = column.columnName.toLowerCase();\n        const fileContext = fileName.toLowerCase();\n        // Determine target category based on file name and column patterns\n        let targetCategory;\n        let targetSubcategory;\n        let targetField;\n        let confidence = 0;\n        let reasoning = \"\";\n        // Category inference logic\n        if (this.matchesPatterns(fileContext, [\n            \"budget\",\n            \"expense\",\n            \"cost\",\n            \"financial\"\n        ]) || column.patternAnalysis.likelyAmount) {\n            targetCategory = \"businessFinancials\";\n            targetSubcategory = \"costFinancialData\";\n            confidence += 0.3;\n            reasoning += \"Financial context detected; \";\n        } else if (this.matchesPatterns(fileContext, [\n            \"sales\",\n            \"growth\",\n            \"forecast\",\n            \"demand\"\n        ]) || this.matchesPatterns(name, [\n            \"sales\",\n            \"revenue\",\n            \"forecast\",\n            \"demand\"\n        ])) {\n            targetCategory = \"salesGrowthTrajectory\";\n            targetSubcategory = \"historicalSalesData\";\n            confidence += 0.3;\n            reasoning += \"Sales/growth context detected; \";\n        } else {\n            targetCategory = \"operationalReporting\";\n            targetSubcategory = this.determineOperationalSubcategory(column, fileContext);\n            confidence += 0.2;\n            reasoning += \"Operational context detected; \";\n        }\n        // Field name mapping with flexible matching\n        targetField = this.mapToTargetField(column, targetCategory, targetSubcategory);\n        // Confidence scoring\n        if (column.patternAnalysis.likelyAmount && targetCategory === \"businessFinancials\") confidence += 0.4;\n        if (column.patternAnalysis.likelyQuantity) confidence += 0.3;\n        if (column.patternAnalysis.likelyPercentage) confidence += 0.2;\n        if (column.nullCount / (column.nullCount + column.sampleValues.length) < 0.1) confidence += 0.1;\n        reasoning += `Column type: ${column.detectedType}; Null rate: ${(column.nullCount / (column.nullCount + column.sampleValues.length) * 100).toFixed(1)}%`;\n        return {\n            sourceColumn: column.columnName,\n            targetCategory,\n            targetSubcategory,\n            targetField,\n            confidence: Math.min(confidence, 1),\n            reasoning\n        };\n    }\n    static determineOperationalSubcategory(column, fileContext) {\n        const name = column.columnName.toLowerCase();\n        if (this.matchesPatterns(name + \" \" + fileContext, this.BUSINESS_CONTEXTS.networkFootprint)) {\n            return \"networkFootprintCapacity\";\n        } else if (this.matchesPatterns(name + \" \" + fileContext, this.BUSINESS_CONTEXTS.orderManagement)) {\n            return \"orderPaymentData\";\n        } else if (this.matchesPatterns(name + \" \" + fileContext, this.BUSINESS_CONTEXTS.performance)) {\n            return \"operationalPerformanceMetrics\";\n        } else {\n            return \"orderShipmentData\";\n        }\n    }\n    static mapToTargetField(column, category, subcategory) {\n        // Create a standardized field name from the source column\n        let fieldName = column.columnName.toLowerCase().replace(/[^a-z0-9]/g, \"\").replace(/\\s+/g, \"\");\n        // Add context-specific prefixes/suffixes\n        if (column.patternAnalysis.likelyAmount) {\n            if (!fieldName.includes(\"cost\") && !fieldName.includes(\"amount\") && !fieldName.includes(\"price\")) {\n                fieldName += \"Amount\";\n            }\n        }\n        if (column.patternAnalysis.likelyQuantity) {\n            if (!fieldName.includes(\"qty\") && !fieldName.includes(\"count\") && !fieldName.includes(\"quantity\")) {\n                fieldName += \"Quantity\";\n            }\n        }\n        if (column.patternAnalysis.likelyPercentage) {\n            if (!fieldName.includes(\"percent\") && !fieldName.includes(\"rate\")) {\n                fieldName += \"Percentage\";\n            }\n        }\n        return fieldName;\n    }\n    static groupMappingsByCategory(mappings) {\n        const grouped = {};\n        for (const mapping of mappings){\n            const key = `${mapping.targetCategory}.${mapping.targetSubcategory}`;\n            if (!grouped[key]) grouped[key] = [];\n            grouped[key].push(mapping);\n        }\n        return grouped;\n    }\n    static buildComprehensiveData(processedData, mappingsByCategory) {\n        const result = {\n            metadata: {\n                lastProcessed: new Date().toISOString()\n            }\n        };\n        // Aggregate data by category\n        const aggregatedData = this.aggregateProcessedData(processedData);\n        for (const [categoryKey, mappings] of Object.entries(mappingsByCategory)){\n            const [category, subcategory] = categoryKey.split(\".\");\n            if (category === \"operationalReporting\") {\n                if (!result.operationalReporting) result.operationalReporting = {};\n                result.operationalReporting[subcategory] = aggregatedData;\n            } else if (category === \"businessFinancials\") {\n                if (!result.businessFinancials) result.businessFinancials = {};\n                result.businessFinancials[subcategory] = aggregatedData;\n            } else if (category === \"salesGrowthTrajectory\") {\n                if (!result.salesGrowthTrajectory) result.salesGrowthTrajectory = {};\n                result.salesGrowthTrajectory[subcategory] = aggregatedData;\n            }\n        }\n        return result;\n    }\n    static aggregateProcessedData(data) {\n        if (data.length === 0) return {};\n        const aggregated = {};\n        const keys = Object.keys(data[0]);\n        for (const key of keys){\n            const values = data.map((row)=>row[key]).filter((val)=>val !== null && val !== undefined);\n            if (values.length === 0) continue;\n            if (typeof values[0] === \"number\") {\n                aggregated[key] = {\n                    total: values.reduce((sum, val)=>sum + val, 0),\n                    average: values.reduce((sum, val)=>sum + val, 0) / values.length,\n                    min: Math.min(...values),\n                    max: Math.max(...values),\n                    count: values.length,\n                    values: values\n                };\n            } else {\n                aggregated[key] = {\n                    uniqueValues: Array.from(new Set(values)),\n                    count: values.length,\n                    values: values\n                };\n            }\n        }\n        return aggregated;\n    }\n    // Utility methods\n    static calculateAverageLength(values) {\n        const lengths = values.map((v)=>String(v).length);\n        return lengths.reduce((sum, len)=>sum + len, 0) / lengths.length;\n    }\n    static containsNumbers(values) {\n        return values.some((v)=>typeof v === \"number\" || !isNaN(Number(v)));\n    }\n    static containsDates(values) {\n        return values.some((v)=>this.isDateLike(v));\n    }\n    static isDateLike(value) {\n        if (!value) return false;\n        const str = String(value);\n        return !isNaN(Date.parse(str)) || /\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}/.test(str) || /\\d{4}-\\d{2}-\\d{2}/.test(str);\n    }\n    static cleanValue(value, targetField) {\n        if (value === null || value === undefined) return value;\n        let cleaned = value;\n        // Remove common formatting\n        if (typeof cleaned === \"string\") {\n            cleaned = cleaned.trim();\n            // Clean currency symbols\n            if (targetField.toLowerCase().includes(\"cost\") || targetField.toLowerCase().includes(\"amount\")) {\n                cleaned = cleaned.replace(/[$,\\s]/g, \"\");\n            }\n            // Clean percentages\n            if (targetField.toLowerCase().includes(\"percent\")) {\n                cleaned = cleaned.replace(/%/g, \"\");\n            }\n        }\n        return cleaned;\n    }\n    static flexibleValidation(value, mapping) {\n        const result = {\n            field: mapping.targetField,\n            value,\n            isValid: true\n        };\n        if (value === null || value === undefined || value === \"\") {\n            return result; // Allow empty values\n        }\n        // Try to convert to appropriate type based on target field\n        try {\n            if (mapping.targetField.includes(\"cost\") || mapping.targetField.includes(\"amount\") || mapping.targetField.includes(\"quantity\") || mapping.targetField.includes(\"count\")) {\n                const numValue = parseFloat(String(value));\n                if (!isNaN(numValue)) {\n                    result.value = numValue;\n                }\n            } else if (mapping.targetField.includes(\"percent\")) {\n                const numValue = parseFloat(String(value));\n                if (!isNaN(numValue)) {\n                    result.value = Math.min(Math.max(numValue, 0), 100); // Clamp to 0-100\n                }\n            } else if (mapping.targetField.includes(\"date\")) {\n                const dateValue = new Date(value);\n                if (!isNaN(dateValue.getTime())) {\n                    result.value = dateValue.toISOString();\n                }\n            }\n        } catch (error) {\n            result.isValid = false;\n            result.errorMessage = `Could not convert '${value}' to expected type`;\n        }\n        return result;\n    }\n    static calculateTemplateConfidence(mappings) {\n        if (mappings.length === 0) return 0;\n        const avgConfidence = mappings.reduce((sum, m)=>sum + m.confidence, 0) / mappings.length;\n        const coverageBonus = Math.min(mappings.length / 10, 0.2); // Bonus for more mappings\n        return Math.min(avgConfidence + coverageBonus, 1);\n    }\n    static calculateFlexibleDataQuality(rawData, validationResults, template) {\n        const totalFields = rawData.length * template.suggestedMappings.length;\n        const validFields = validationResults.filter((r)=>r.isValid).length;\n        const nonEmptyFields = validationResults.filter((r)=>r.value !== null && r.value !== undefined && r.value !== \"\").length;\n        return {\n            completeness: totalFields > 0 ? nonEmptyFields / totalFields * 100 : 100,\n            accuracy: totalFields > 0 ? validFields / totalFields * 100 : 100,\n            consistency: 95,\n            timeliness: 100,\n            validRecords: Math.floor(validFields / template.suggestedMappings.length),\n            totalRecords: rawData.length,\n            missingFields: [],\n            invalidValues: validationResults.filter((r)=>!r.isValid).map((r)=>({\n                    field: r.field,\n                    value: r.value,\n                    reason: r.errorMessage || \"Validation failed\"\n                }))\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/adaptive-data-validator.ts\n");

/***/ }),

/***/ "(rsc)/./lib/data-validator.ts":
/*!*******************************!*\
  !*** ./lib/data-validator.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataProcessingUtils: () => (/* binding */ DataProcessingUtils),\n/* harmony export */   DataValidator: () => (/* binding */ DataValidator)\n/* harmony export */ });\n/* harmony import */ var _types_data_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/data-schema */ \"(rsc)/./types/data-schema.ts\");\n/* harmony import */ var _adaptive_data_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adaptive-data-validator */ \"(rsc)/./lib/adaptive-data-validator.ts\");\n/* harmony import */ var _missing_data_imputation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./missing-data-imputation */ \"(rsc)/./lib/missing-data-imputation.ts\");\n// XLSX is imported dynamically in parseFile to avoid SSR issues\n\n\n\nclass DataValidator {\n    /**\n   * Enhanced processing with automatic missing data imputation\n   */ static async processDataWithImputationAndTemplate(rawData, template, imputationConfig = {}) {\n        if (!rawData || rawData.length === 0) {\n            throw new Error(\"No data provided for processing\");\n        }\n        // Step 1: Diagnose missing data patterns\n        const diagnosis = _missing_data_imputation__WEBPACK_IMPORTED_MODULE_2__.AdvancedDataImputation.diagnoseMissingData(rawData);\n        let imputationResult;\n        let dataToProcess = rawData;\n        // Step 2: Apply imputation if missing data is detected\n        if (diagnosis.patterns.length > 0) {\n            console.log(\"Missing data detected, applying advanced imputation...\");\n            console.log(\"Recommended method:\", diagnosis.suggestedMethod);\n            console.log(\"Missing data patterns:\", diagnosis.patterns.map((p)=>`${p.field}: ${p.missingPercentage.toFixed(1)}% missing (${p.pattern})`));\n            try {\n                imputationResult = await _missing_data_imputation__WEBPACK_IMPORTED_MODULE_2__.AdvancedDataImputation.imputeMissingData(rawData, {\n                    ...imputationConfig,\n                    method: imputationConfig.method || diagnosis.suggestedMethod\n                });\n                dataToProcess = imputationResult.data;\n                console.log(`Imputation completed: ${imputationResult.statistics.totalImputed} values imputed with ${imputationResult.statistics.averageConfidence.toFixed(2)} average confidence`);\n            } catch (error) {\n                console.warn(\"Imputation failed, proceeding with original data:\", error);\n            }\n        }\n        // Step 3: Process the data (imputed or original) with the template\n        const processingResult = this.processDataWithTemplate(dataToProcess, template);\n        // Step 4: Enhance metadata with imputation information\n        if (processingResult.data?.metadata && imputationResult) {\n            processingResult.data.metadata.imputationInfo = {\n                methodUsed: imputationResult.statistics.methodsUsed,\n                totalImputed: imputationResult.statistics.totalImputed,\n                averageConfidence: imputationResult.statistics.averageConfidence,\n                qualityMetrics: imputationResult.qualityMetrics,\n                imputedFields: imputationResult.imputedFields.map((field)=>({\n                        field: field.field,\n                        rowIndex: field.rowIndex,\n                        confidence: field.confidence,\n                        method: field.method\n                    }))\n            };\n        }\n        return {\n            processingResult,\n            imputationResult\n        };\n    }\n    /**\n   * Diagnose missing data patterns in a dataset\n   */ static diagnoseMissingDataPatterns(data) {\n        return _missing_data_imputation__WEBPACK_IMPORTED_MODULE_2__.AdvancedDataImputation.diagnoseMissingData(data);\n    }\n    /**\n   * Apply standalone imputation to data\n   */ static async imputeMissingData(data, config = {}) {\n        return _missing_data_imputation__WEBPACK_IMPORTED_MODULE_2__.AdvancedDataImputation.imputeMissingData(data, config);\n    }\n    // Validate individual field values\n    static validateFieldValue(value, mapping) {\n        const result = {\n            field: mapping.targetField,\n            value,\n            isValid: true\n        };\n        // Check if required field is missing\n        if (mapping.required && (value === null || value === undefined || value === \"\")) {\n            result.isValid = false;\n            result.errorMessage = `Required field '${mapping.targetField}' is missing`;\n            return result;\n        }\n        // Skip validation for optional empty fields\n        if (!mapping.required && (value === null || value === undefined || value === \"\")) {\n            return result;\n        }\n        // Type validation\n        switch(mapping.dataType){\n            case \"number\":\n                const numValue = typeof value === \"string\" ? parseFloat(value) : value;\n                if (isNaN(numValue)) {\n                    result.isValid = false;\n                    result.errorMessage = `Expected number, got '${value}'`;\n                    result.suggestion = \"Ensure this field contains only numeric values\";\n                } else {\n                    result.value = numValue;\n                    // Range validation\n                    if (mapping.validation?.min !== undefined && numValue < mapping.validation.min) {\n                        result.isValid = false;\n                        result.errorMessage = `Value ${numValue} is below minimum ${mapping.validation.min}`;\n                    }\n                    if (mapping.validation?.max !== undefined && numValue > mapping.validation.max) {\n                        result.isValid = false;\n                        result.errorMessage = `Value ${numValue} is above maximum ${mapping.validation.max}`;\n                    }\n                }\n                break;\n            case \"string\":\n                const strValue = String(value).trim();\n                result.value = strValue;\n                // Pattern validation\n                if (mapping.validation?.pattern) {\n                    const regex = new RegExp(mapping.validation.pattern);\n                    if (!regex.test(strValue)) {\n                        result.isValid = false;\n                        result.errorMessage = `Value '${strValue}' does not match required pattern`;\n                    }\n                }\n                // Allowed values validation\n                if (mapping.validation?.allowedValues && !mapping.validation.allowedValues.includes(strValue)) {\n                    result.isValid = false;\n                    result.errorMessage = `Value '${strValue}' is not in allowed values: ${mapping.validation.allowedValues.join(\", \")}`;\n                }\n                break;\n            case \"boolean\":\n                if (typeof value === \"boolean\") {\n                    result.value = value;\n                } else {\n                    const strValue = String(value).toLowerCase().trim();\n                    if ([\n                        \"true\",\n                        \"1\",\n                        \"yes\",\n                        \"y\"\n                    ].includes(strValue)) {\n                        result.value = true;\n                    } else if ([\n                        \"false\",\n                        \"0\",\n                        \"no\",\n                        \"n\"\n                    ].includes(strValue)) {\n                        result.value = false;\n                    } else {\n                        result.isValid = false;\n                        result.errorMessage = `Cannot convert '${value}' to boolean`;\n                    }\n                }\n                break;\n            case \"date\":\n                const dateValue = new Date(value);\n                if (isNaN(dateValue.getTime())) {\n                    result.isValid = false;\n                    result.errorMessage = `Invalid date format: '${value}'`;\n                } else {\n                    result.value = dateValue.toISOString();\n                }\n                break;\n        }\n        return result;\n    }\n    // Process raw data using mapping template (traditional or adaptive)\n    static processDataWithTemplate(rawData, template) {\n        // Check if this is an adaptive template\n        if (\"suggestedMappings\" in template) {\n            return _adaptive_data_validator__WEBPACK_IMPORTED_MODULE_1__.AdaptiveDataValidator.processWithAdaptiveTemplate(rawData, template);\n        }\n        // Continue with traditional processing\n        const errors = [];\n        const warnings = [];\n        const validationResults = [];\n        const processedData = [];\n        let validRows = 0;\n        let skippedRows = 0;\n        for(let rowIndex = 0; rowIndex < rawData.length; rowIndex++){\n            const row = rawData[rowIndex];\n            const processedRow = {};\n            let isValidRow = true;\n            let hasRequiredFields = false;\n            // Check for required columns\n            for (const requiredColumn of template.requiredColumns){\n                if (!(requiredColumn in row) || row[requiredColumn] === null || row[requiredColumn] === undefined || row[requiredColumn] === \"\") {\n                    errors.push(`Row ${rowIndex + 1}: Missing required column '${requiredColumn}'`);\n                    isValidRow = false;\n                } else {\n                    hasRequiredFields = true;\n                }\n            }\n            if (!hasRequiredFields) {\n                skippedRows++;\n                continue;\n            }\n            // Process each mapped field\n            for (const mapping of template.mappings){\n                const sourceValue = row[mapping.sourceColumn];\n                const validation = this.validateFieldValue(sourceValue, mapping);\n                validationResults.push(validation);\n                if (!validation.isValid) {\n                    errors.push(`Row ${rowIndex + 1}, Field '${mapping.targetField}': ${validation.errorMessage}`);\n                    isValidRow = false;\n                } else {\n                    processedRow[mapping.targetField] = validation.value;\n                }\n            }\n            if (isValidRow) {\n                processedData.push(processedRow);\n                validRows++;\n            } else {\n                skippedRows++;\n            }\n        }\n        // Calculate data quality metrics\n        const dataQuality = this.calculateDataQuality(rawData, validationResults, template);\n        // Build comprehensive operational data structure\n        const comprehensiveData = {\n            metadata: {\n                dataQuality,\n                validationResults,\n                lastProcessed: new Date().toISOString()\n            }\n        };\n        // Map processed data to appropriate category structure\n        if (template.targetCategory === \"operationalReporting\") {\n            comprehensiveData.operationalReporting = {\n                [template.targetSubcategory]: this.aggregateData(processedData)\n            };\n        } else if (template.targetCategory === \"businessFinancials\") {\n            comprehensiveData.businessFinancials = {\n                [template.targetSubcategory]: this.aggregateData(processedData)\n            };\n        } else if (template.targetCategory === \"salesGrowthTrajectory\") {\n            comprehensiveData.salesGrowthTrajectory = {\n                [template.targetSubcategory]: this.aggregateData(processedData)\n            };\n        }\n        return {\n            success: errors.length === 0,\n            data: comprehensiveData,\n            errors,\n            warnings,\n            summary: {\n                totalRows: rawData.length,\n                validRows,\n                skippedRows,\n                dataQuality\n            }\n        };\n    }\n    // Aggregate array data into summary metrics\n    static aggregateData(data) {\n        if (data.length === 0) return {};\n        const aggregated = {};\n        const keys = Object.keys(data[0]);\n        for (const key of keys){\n            const values = data.map((row)=>row[key]).filter((val)=>val !== null && val !== undefined);\n            if (values.length === 0) continue;\n            const firstValue = values[0];\n            if (typeof firstValue === \"number\") {\n                // For numeric fields, calculate statistics\n                aggregated[key] = {\n                    total: values.reduce((sum, val)=>sum + val, 0),\n                    average: values.reduce((sum, val)=>sum + val, 0) / values.length,\n                    min: Math.min(...values),\n                    max: Math.max(...values),\n                    count: values.length,\n                    values: values // Keep individual values for detailed analysis\n                };\n            } else {\n                // For non-numeric fields, keep unique values\n                const uniqueValues = Array.from(new Set(values));\n                aggregated[key] = {\n                    uniqueValues,\n                    count: values.length,\n                    values: values\n                };\n            }\n        }\n        return aggregated;\n    }\n    // Calculate comprehensive data quality metrics\n    static calculateDataQuality(rawData, validationResults, template) {\n        const totalFields = rawData.length * template.mappings.length;\n        const validFields = validationResults.filter((r)=>r.isValid).length;\n        const requiredFieldsCount = rawData.length * template.requiredColumns.length;\n        const filledRequiredFields = validationResults.filter((r)=>r.isValid && template.requiredColumns.some((col)=>template.mappings.find((m)=>m.sourceColumn === col)?.targetField === r.field)).length;\n        const missingFields = template.mappings.filter((mapping)=>!rawData.some((row)=>row[mapping.sourceColumn] !== null && row[mapping.sourceColumn] !== undefined)).map((mapping)=>mapping.sourceColumn);\n        const invalidValues = validationResults.filter((r)=>!r.isValid).map((r)=>({\n                field: r.field,\n                value: r.value,\n                reason: r.errorMessage || \"Unknown validation error\"\n            }));\n        return {\n            completeness: requiredFieldsCount > 0 ? filledRequiredFields / requiredFieldsCount * 100 : 100,\n            accuracy: totalFields > 0 ? validFields / totalFields * 100 : 100,\n            consistency: 100,\n            timeliness: 100,\n            validRecords: validationResults.filter((r)=>r.isValid).length,\n            totalRecords: rawData.length,\n            missingFields,\n            invalidValues\n        };\n    }\n    // Enhanced template detection with adaptive fallback\n    static detectDataTemplate(columnHeaders, fileName, data) {\n        // First try traditional template matching\n        let bestMatch = null;\n        for (const template of _types_data_schema__WEBPACK_IMPORTED_MODULE_0__.DATA_MAPPING_TEMPLATES){\n            let score = 0;\n            // Calculate match score based on column presence\n            for (const mapping of template.mappings){\n                if (columnHeaders.some((header)=>header.toLowerCase().includes(mapping.sourceColumn.toLowerCase()) || mapping.sourceColumn.toLowerCase().includes(header.toLowerCase()))) {\n                    score += mapping.required ? 2 : 1; // Weight required fields more heavily\n                }\n            }\n            // Normalize score by template size\n            const normalizedScore = score / template.mappings.length;\n            if (!bestMatch || normalizedScore > bestMatch.score) {\n                bestMatch = {\n                    template,\n                    score: normalizedScore\n                };\n            }\n        }\n        // If traditional matching found a good match, use it\n        if (bestMatch && bestMatch.score > 0.5) {\n            return bestMatch.template;\n        }\n        // Otherwise, create adaptive template\n        if (fileName && data && data.length > 0) {\n            try {\n                const columnAnalysis = _adaptive_data_validator__WEBPACK_IMPORTED_MODULE_1__.AdaptiveDataValidator.analyzeColumns(data);\n                const adaptiveTemplate = _adaptive_data_validator__WEBPACK_IMPORTED_MODULE_1__.AdaptiveDataValidator.createAdaptiveTemplate(fileName, data, columnAnalysis);\n                // Only return adaptive template if it has reasonable confidence\n                if (adaptiveTemplate.confidence > 0.2) {\n                    return adaptiveTemplate;\n                }\n            } catch (error) {\n                console.warn(\"Failed to create adaptive template:\", error);\n            }\n        }\n        // Return best traditional match even if score is low, or null\n        return bestMatch?.template || null;\n    }\n    // Parse Excel/CSV file and extract data\n    static async parseFile(file) {\n        // Ensure this runs only on client side\n        if (true) {\n            throw new Error(\"File parsing is only available on the client side\");\n        }\n        try {\n            // Dynamically import XLSX to avoid SSR issues\n            const XLSX = await __webpack_require__.e(/*! import() */ \"vendor-chunks/xlsx\").then(__webpack_require__.bind(__webpack_require__, /*! xlsx */ \"(rsc)/./node_modules/xlsx/xlsx.mjs\"));\n            return new Promise((resolve, reject)=>{\n                const reader = new FileReader();\n                reader.onload = (e)=>{\n                    try {\n                        const data = e.target?.result;\n                        let workbook;\n                        if (file.type.includes(\"csv\")) {\n                            workbook = XLSX.read(data, {\n                                type: \"binary\"\n                            });\n                        } else {\n                            workbook = XLSX.read(data, {\n                                type: \"array\"\n                            });\n                        }\n                        const sheetName = workbook.SheetNames[0];\n                        const worksheet = workbook.Sheets[sheetName];\n                        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                            header: 1\n                        });\n                        if (jsonData.length === 0) {\n                            reject(new Error(\"File contains no data\"));\n                            return;\n                        }\n                        const columnHeaders = jsonData[0];\n                        const dataRows = jsonData.slice(1).map((row)=>{\n                            const rowObj = {};\n                            columnHeaders.forEach((header, index)=>{\n                                rowObj[header] = row[index];\n                            });\n                            return rowObj;\n                        });\n                        resolve({\n                            data: dataRows,\n                            columnHeaders\n                        });\n                    } catch (error) {\n                        reject(new Error(`Failed to parse file: ${error}`));\n                    }\n                };\n                reader.onerror = ()=>reject(new Error(\"Failed to read file\"));\n                if (file.type.includes(\"csv\")) {\n                    reader.readAsText(file);\n                } else {\n                    reader.readAsArrayBuffer(file);\n                }\n            });\n        } catch (error) {\n            throw new Error(`Failed to process file: ${error}`);\n        }\n    }\n    /**\n   * Extract pallet and carton data from spreadsheet\n   * @param data Parsed JSON data from the file\n   * @returns Object containing units per carton and cartons per pallet\n   */ static extractCartonPalletData(data) {\n        const result = {};\n        if (!data || data.length === 0) return result;\n        // Look for column names that might contain carton/pallet data\n        const columnMappings = {\n            units_per_carton: [\n                \"units per carton\",\n                \"units/carton\",\n                \"unit per carton\",\n                \"upc\",\n                \"units_per_carton\",\n                \"carton_size\"\n            ],\n            cartons_per_pallet: [\n                \"cartons per pallet\",\n                \"cartons/pallet\",\n                \"carton per pallet\",\n                \"cpp\",\n                \"cartons_per_pallet\",\n                \"pallet_size\"\n            ],\n            days_on_hand: [\n                \"days on hand\",\n                \"doh\",\n                \"days_on_hand\",\n                \"inventory_days\",\n                \"stock_days\"\n            ]\n        };\n        // Find relevant columns\n        const firstRow = data[0];\n        const columnNames = Object.keys(firstRow).map((col)=>col.toLowerCase().trim());\n        const foundColumns = {};\n        Object.entries(columnMappings).forEach(([key, patterns])=>{\n            const matchingColumn = columnNames.find((col)=>patterns.some((pattern)=>col.includes(pattern.toLowerCase())));\n            if (matchingColumn) {\n                foundColumns[key] = Object.keys(firstRow)[columnNames.indexOf(matchingColumn)];\n            }\n        });\n        // Extract values from the data\n        if (foundColumns.units_per_carton) {\n            const values = data.map((row)=>row[foundColumns.units_per_carton]).filter((val)=>val && !isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n            if (values.length > 0) {\n                // Use the most common value or average\n                result.units_per_carton = Math.round(values.reduce((sum, val)=>sum + val, 0) / values.length);\n            }\n        }\n        if (foundColumns.cartons_per_pallet) {\n            const values = data.map((row)=>row[foundColumns.cartons_per_pallet]).filter((val)=>val && !isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n            if (values.length > 0) {\n                result.cartons_per_pallet = Math.round(values.reduce((sum, val)=>sum + val, 0) / values.length);\n            }\n        }\n        if (foundColumns.days_on_hand) {\n            const values = data.map((row)=>row[foundColumns.days_on_hand]).filter((val)=>val && !isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n            if (values.length > 0) {\n                result.days_on_hand = Math.round(values.reduce((sum, val)=>sum + val, 0) / values.length);\n            }\n        }\n        // If no columns found, try to extract from any numeric data that makes sense\n        if (!result.units_per_carton && !result.cartons_per_pallet) {\n            // Look for reasonable default patterns in the data\n            const numericColumns = Object.keys(firstRow).filter((col)=>{\n                const values = data.slice(0, 10).map((row)=>row[col]).filter((val)=>!isNaN(parseFloat(val)));\n                return values.length > 5; // Column has mostly numeric data\n            });\n            numericColumns.forEach((col)=>{\n                const values = data.map((row)=>parseFloat(row[col])).filter((val)=>!isNaN(val));\n                const avg = values.reduce((sum, val)=>sum + val, 0) / values.length;\n                const colName = col.toLowerCase();\n                // Heuristics for common ranges\n                if (avg >= 6 && avg <= 100 && colName.includes(\"carton\")) {\n                    result.units_per_carton = Math.round(avg);\n                } else if (avg >= 20 && avg <= 200 && colName.includes(\"pallet\")) {\n                    result.cartons_per_pallet = Math.round(avg);\n                } else if (avg >= 30 && avg <= 500 && (colName.includes(\"day\") || colName.includes(\"doh\"))) {\n                    result.days_on_hand = Math.round(avg);\n                }\n            });\n        }\n        return result;\n    }\n    /**\n   * Extract metadata from parsed data\n   * @param data Parsed JSON data from the file\n   * @param fileName Original file name\n   * @returns Object containing metadata about the data\n   */ static extractMetadata(data, fileName) {\n        if (!data || data.length === 0) {\n            return {\n                rowCount: 0,\n                columnCount: 0,\n                fileName,\n                processingDate: new Date().toISOString()\n            };\n        }\n        const firstRow = data[0];\n        const columns = Object.keys(firstRow);\n        const cartonPalletData = DataValidator.extractCartonPalletData(data);\n        return {\n            rowCount: data.length,\n            columnCount: columns.length,\n            columns: columns,\n            fileName,\n            processingDate: new Date().toISOString(),\n            dataTypes: DataValidator.analyzeColumnTypes(data),\n            sampleData: data.slice(0, 3),\n            ...cartonPalletData // Include carton/pallet data in metadata\n        };\n    }\n    /**\n   * Analyze column types in the data\n   * @param data Parsed data array\n   * @returns Object mapping column names to detected types\n   */ static analyzeColumnTypes(data) {\n        if (!data || data.length === 0) return {};\n        const firstRow = data[0];\n        const typeAnalysis = {};\n        Object.keys(firstRow).forEach((column)=>{\n            const sampleValues = data.slice(0, 10).map((row)=>row[column]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n            if (sampleValues.length === 0) {\n                typeAnalysis[column] = \"empty\";\n                return;\n            }\n            const numericValues = sampleValues.filter((val)=>!isNaN(parseFloat(val)));\n            const dateValues = sampleValues.filter((val)=>!isNaN(Date.parse(val)));\n            if (numericValues.length === sampleValues.length) {\n                typeAnalysis[column] = \"number\";\n            } else if (dateValues.length === sampleValues.length) {\n                typeAnalysis[column] = \"date\";\n            } else {\n                typeAnalysis[column] = \"string\";\n            }\n        });\n        return typeAnalysis;\n    }\n}\n// Utility functions for data processing\nconst DataProcessingUtils = {\n    // Format validation results for display\n    formatValidationResults: (results)=>{\n        const errors = results.filter((r)=>!r.isValid);\n        if (errors.length === 0) return \"All data validation checks passed successfully.\";\n        return `Found ${errors.length} validation errors:\\n${errors.map((r)=>`• ${r.field}: ${r.errorMessage}`).join(\"\\n\")}`;\n    },\n    // Format data quality metrics for display\n    formatDataQuality: (quality)=>{\n        return `Data Quality Assessment:\n�� Completeness: ${quality.completeness.toFixed(1)}%\n• Accuracy: ${quality.accuracy.toFixed(1)}%\n• Valid Records: ${quality.validRecords}/${quality.totalRecords}\n${quality.missingFields.length > 0 ? `• Missing Fields: ${quality.missingFields.join(\", \")}` : \"\"}\n${quality.invalidValues.length > 0 ? `• Invalid Values: ${quality.invalidValues.length} found` : \"\"}`;\n    },\n    // Generate processing summary\n    generateProcessingSummary: (result)=>{\n        const { summary, errors, warnings } = result;\n        return `Processing Complete:\n• Total Rows: ${summary.totalRows}\n• Valid Rows: ${summary.validRows}\n• Skipped Rows: ${summary.skippedRows}\n• Success Rate: ${(summary.validRows / summary.totalRows * 100).toFixed(1)}%\n${errors.length > 0 ? `\\nErrors (${errors.length}):\\n${errors.slice(0, 5).join(\"\\n\")}${errors.length > 5 ? \"\\n...\" : \"\"}` : \"\"}\n${warnings.length > 0 ? `\\nWarnings (${warnings.length}):\\n${warnings.slice(0, 3).join(\"\\n\")}${warnings.length > 3 ? \"\\n...\" : \"\"}` : \"\"}`;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/data-validator.ts\n");

/***/ }),

/***/ "(rsc)/./lib/missing-data-imputation.ts":
/*!****************************************!*\
  !*** ./lib/missing-data-imputation.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedDataImputation: () => (/* binding */ AdvancedDataImputation)\n/* harmony export */ });\n// Advanced Missing Data Imputation System\n// Implements Random Forests, XGBoost-style algorithms, Neural Networks (MissForest, GAIN), and MICE\nclass AdvancedDataImputation {\n    /**\n   * Diagnose missing data patterns and recommend imputation strategy\n   */ static diagnoseMissingData(data) {\n        if (!data || data.length === 0) {\n            return {\n                patterns: [],\n                recommendations: [],\n                suggestedMethod: \"mean_median\"\n            };\n        }\n        const columns = Object.keys(data[0]);\n        const patterns = [];\n        const recommendations = [];\n        // Analyze each field for missing patterns\n        for (const field of columns){\n            const pattern = this.analyzeFieldMissingPattern(data, field, columns);\n            if (pattern.missingCount > 0) {\n                patterns.push(pattern);\n            }\n        }\n        // Generate recommendations based on patterns\n        const totalMissing = patterns.reduce((sum, p)=>sum + p.missingCount, 0);\n        const highCorrelationPatterns = patterns.filter((p)=>p.correlatedWith.length > 0);\n        if (totalMissing === 0) {\n            recommendations.push(\"No missing data detected - ready for processing\");\n            return {\n                patterns,\n                recommendations,\n                suggestedMethod: \"none\"\n            };\n        }\n        if (patterns.length <= 2 && patterns.every((p)=>p.missingPercentage < 10)) {\n            recommendations.push(\"Low missing data rate - simple imputation methods recommended\");\n            return {\n                patterns,\n                recommendations,\n                suggestedMethod: \"mean_median\"\n            };\n        }\n        if (highCorrelationPatterns.length > 0) {\n            recommendations.push(\"Strong correlations detected - use regression or ML-based methods\");\n            return {\n                patterns,\n                recommendations,\n                suggestedMethod: \"random_forest\"\n            };\n        }\n        if (patterns.some((p)=>p.missingPercentage > 30)) {\n            recommendations.push(\"High missing data rate - advanced imputation required\");\n            return {\n                patterns,\n                recommendations,\n                suggestedMethod: \"neural_network\"\n            };\n        }\n        recommendations.push(\"Moderate complexity - MICE or Random Forest recommended\");\n        return {\n            patterns,\n            recommendations,\n            suggestedMethod: \"mice\"\n        };\n    }\n    /**\n   * Main imputation method that automatically selects best strategy\n   */ static async imputeMissingData(data, config = {}) {\n        const defaultConfig = {\n            method: \"auto\",\n            confidence_threshold: 0.7,\n            max_iterations: 10,\n            mark_imputed: true\n        };\n        const finalConfig = {\n            ...defaultConfig,\n            ...config\n        };\n        if (!data || data.length === 0) {\n            throw new Error(\"No data provided for imputation\");\n        }\n        // Diagnose missing data first\n        const diagnosis = this.diagnoseMissingData(data);\n        // Auto-select method if not specified\n        let method = finalConfig.method;\n        if (method === \"auto\") {\n            method = diagnosis.suggestedMethod;\n        }\n        // Perform imputation based on selected method\n        let result;\n        switch(method){\n            case \"mean_median\":\n                result = this.imputeWithMeanMedian(data, finalConfig);\n                break;\n            case \"knn\":\n                result = this.imputeWithKNN(data, finalConfig);\n                break;\n            case \"regression\":\n                result = this.imputeWithRegression(data, finalConfig);\n                break;\n            case \"random_forest\":\n                result = this.imputeWithRandomForest(data, finalConfig);\n                break;\n            case \"neural_network\":\n                result = await this.imputeWithNeuralNetwork(data, finalConfig);\n                break;\n            case \"mice\":\n                result = this.imputeWithMICE(data, finalConfig);\n                break;\n            default:\n                result = this.imputeWithMeanMedian(data, finalConfig);\n        }\n        // Add diagnosis information to result\n        result.statistics.methodsUsed = [\n            method\n        ];\n        return result;\n    }\n    /**\n   * Simple mean/median imputation for basic cases\n   */ static imputeWithMeanMedian(data, config) {\n        const imputedData = JSON.parse(JSON.stringify(data));\n        const imputedFields = [];\n        const columns = Object.keys(data[0]);\n        for (const column of columns){\n            const values = data.map((row)=>row[column]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n            if (values.length === 0) continue;\n            let imputeValue;\n            const numericValues = values.filter((val)=>!isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n            if (numericValues.length === values.length && numericValues.length > 0) {\n                // Numeric field - use median for robustness\n                const sorted = numericValues.sort((a, b)=>a - b);\n                const mid = Math.floor(sorted.length / 2);\n                imputeValue = sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n            } else {\n                // Categorical field - use mode\n                const counts = values.reduce((acc, val)=>{\n                    acc[val] = (acc[val] || 0) + 1;\n                    return acc;\n                }, {});\n                imputeValue = Object.keys(counts).reduce((a, b)=>counts[a] > counts[b] ? a : b);\n            }\n            // Apply imputation\n            for(let i = 0; i < imputedData.length; i++){\n                const originalValue = imputedData[i][column];\n                if (originalValue === null || originalValue === undefined || originalValue === \"\") {\n                    imputedData[i][column] = imputeValue;\n                    if (config.mark_imputed) {\n                        imputedData[i][`${column}_imputed`] = true;\n                    }\n                    imputedFields.push({\n                        field: column,\n                        originalValue,\n                        imputedValue: imputeValue,\n                        confidence: 0.6,\n                        method: \"mean_median\",\n                        rowIndex: i\n                    });\n                }\n            }\n        }\n        return this.buildImputationResult(imputedData, imputedFields, [\n            \"mean_median\"\n        ]);\n    }\n    /**\n   * K-Nearest Neighbors imputation\n   */ static imputeWithKNN(data, config) {\n        const imputedData = JSON.parse(JSON.stringify(data));\n        const imputedFields = [];\n        const columns = Object.keys(data[0]);\n        const k = Math.min(5, Math.floor(data.length / 10)); // Dynamic k selection\n        for (const targetColumn of columns){\n            const missingIndices = imputedData.map((row, idx)=>({\n                    row,\n                    idx\n                })).filter(({ row })=>row[targetColumn] === null || row[targetColumn] === undefined || row[targetColumn] === \"\").map(({ idx })=>idx);\n            if (missingIndices.length === 0) continue;\n            const validData = imputedData.filter((row)=>row[targetColumn] !== null && row[targetColumn] !== undefined && row[targetColumn] !== \"\");\n            if (validData.length === 0) continue;\n            for (const missingIdx of missingIndices){\n                const missingRow = imputedData[missingIdx];\n                // Calculate distances to all valid rows\n                const distances = validData.map((validRow)=>({\n                        row: validRow,\n                        distance: this.calculateDistance(missingRow, validRow, columns.filter((col)=>col !== targetColumn))\n                    }));\n                // Get k nearest neighbors\n                const neighbors = distances.sort((a, b)=>a.distance - b.distance).slice(0, k);\n                // Compute imputed value\n                const neighborValues = neighbors.map((n)=>n.row[targetColumn]);\n                let imputedValue;\n                if (neighborValues.every((val)=>!isNaN(parseFloat(val)))) {\n                    // Numeric - weighted average\n                    const weights = neighbors.map((n)=>1 / (n.distance + 1e-6)); // Add small epsilon to avoid division by zero\n                    const weightedSum = neighbors.reduce((sum, n, i)=>sum + parseFloat(n.row[targetColumn]) * weights[i], 0);\n                    const weightSum = weights.reduce((sum, w)=>sum + w, 0);\n                    imputedValue = weightedSum / weightSum;\n                } else {\n                    // Categorical - mode of neighbors\n                    const counts = neighborValues.reduce((acc, val)=>{\n                        acc[val] = (acc[val] || 0) + 1;\n                        return acc;\n                    }, {});\n                    imputedValue = Object.keys(counts).reduce((a, b)=>counts[a] > counts[b] ? a : b);\n                }\n                // Apply imputation\n                const confidence = Math.max(0.5, 1 - (neighbors[0]?.distance || 0.5));\n                imputedData[missingIdx][targetColumn] = imputedValue;\n                if (config.mark_imputed) {\n                    imputedData[missingIdx][`${targetColumn}_imputed`] = true;\n                }\n                imputedFields.push({\n                    field: targetColumn,\n                    originalValue: missingRow[targetColumn],\n                    imputedValue,\n                    confidence,\n                    method: \"knn\",\n                    rowIndex: missingIdx\n                });\n            }\n        }\n        return this.buildImputationResult(imputedData, imputedFields, [\n            \"knn\"\n        ]);\n    }\n    /**\n   * Regression-based imputation\n   */ static imputeWithRegression(data, config) {\n        const imputedData = JSON.parse(JSON.stringify(data));\n        const imputedFields = [];\n        const columns = Object.keys(data[0]);\n        for (const targetColumn of columns){\n            const missingIndices = imputedData.map((row, idx)=>({\n                    row,\n                    idx\n                })).filter(({ row })=>row[targetColumn] === null || row[targetColumn] === undefined || row[targetColumn] === \"\").map(({ idx })=>idx);\n            if (missingIndices.length === 0) continue;\n            // Get predictor columns (exclude target and non-numeric)\n            const predictorColumns = columns.filter((col)=>{\n                if (col === targetColumn) return false;\n                const values = data.map((row)=>row[col]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n                return values.length > 0 && values.every((val)=>!isNaN(parseFloat(val)));\n            });\n            if (predictorColumns.length === 0) continue;\n            // Prepare training data\n            const trainingData = imputedData.filter((row)=>row[targetColumn] !== null && row[targetColumn] !== undefined && row[targetColumn] !== \"\" && predictorColumns.every((col)=>row[col] !== null && row[col] !== undefined && row[col] !== \"\"));\n            if (trainingData.length < 3) continue; // Need minimum data for regression\n            // Simple linear regression implementation\n            const { coefficients, rSquared } = this.simpleLinearRegression(trainingData, predictorColumns, targetColumn);\n            // Apply predictions\n            for (const missingIdx of missingIndices){\n                const missingRow = imputedData[missingIdx];\n                // Check if all predictors are available\n                if (predictorColumns.some((col)=>missingRow[col] === null || missingRow[col] === undefined || missingRow[col] === \"\")) {\n                    continue; // Skip if predictors are missing\n                }\n                // Calculate predicted value\n                let prediction = coefficients?.intercept || 0;\n                for(let i = 0; i < predictorColumns.length; i++){\n                    prediction += (coefficients?.slopes[i] || 0) * parseFloat(missingRow[predictorColumns[i]]);\n                }\n                const confidence = Math.max(0.4, rSquared);\n                imputedData[missingIdx][targetColumn] = prediction;\n                if (config.mark_imputed) {\n                    imputedData[missingIdx][`${targetColumn}_imputed`] = true;\n                }\n                imputedFields.push({\n                    field: targetColumn,\n                    originalValue: missingRow[targetColumn],\n                    imputedValue: prediction,\n                    confidence,\n                    method: \"regression\",\n                    rowIndex: missingIdx\n                });\n            }\n        }\n        return this.buildImputationResult(imputedData, imputedFields, [\n            \"regression\"\n        ]);\n    }\n    /**\n   * Random Forest-style imputation\n   */ static imputeWithRandomForest(data, config) {\n        const imputedData = JSON.parse(JSON.stringify(data));\n        const imputedFields = [];\n        const columns = Object.keys(data[0]);\n        const numTrees = 10; // Simplified forest size\n        for (const targetColumn of columns){\n            const missingIndices = imputedData.map((row, idx)=>({\n                    row,\n                    idx\n                })).filter(({ row })=>row[targetColumn] === null || row[targetColumn] === undefined || row[targetColumn] === \"\").map(({ idx })=>idx);\n            if (missingIndices.length === 0) continue;\n            const predictorColumns = columns.filter((col)=>col !== targetColumn);\n            // Create multiple decision trees (simplified random forest)\n            const trees = [];\n            for(let t = 0; t < numTrees; t++){\n                const tree = this.buildSimpleDecisionTree(imputedData, predictorColumns, targetColumn);\n                if (tree) trees.push(tree);\n            }\n            if (trees.length === 0) continue;\n            // Apply ensemble predictions\n            for (const missingIdx of missingIndices){\n                const missingRow = imputedData[missingIdx];\n                const predictions = trees.map((tree)=>this.predictWithTree(tree, missingRow));\n                let imputedValue;\n                if (predictions.every((p)=>!isNaN(parseFloat(p)))) {\n                    // Numeric - average\n                    imputedValue = predictions.reduce((sum, p)=>sum + parseFloat(p), 0) / predictions.length;\n                } else {\n                    // Categorical - mode\n                    const counts = predictions.reduce((acc, val)=>{\n                        acc[val] = (acc[val] || 0) + 1;\n                        return acc;\n                    }, {});\n                    imputedValue = Object.keys(counts).reduce((a, b)=>counts[a] > counts[b] ? a : b);\n                }\n                const confidence = Math.min(0.9, 0.5 + trees.length / numTrees * 0.4);\n                imputedData[missingIdx][targetColumn] = imputedValue;\n                if (config.mark_imputed) {\n                    imputedData[missingIdx][`${targetColumn}_imputed`] = true;\n                }\n                imputedFields.push({\n                    field: targetColumn,\n                    originalValue: missingRow[targetColumn],\n                    imputedValue,\n                    confidence,\n                    method: \"random_forest\",\n                    rowIndex: missingIdx\n                });\n            }\n        }\n        return this.buildImputationResult(imputedData, imputedFields, [\n            \"random_forest\"\n        ]);\n    }\n    /**\n   * Neural Network-based imputation (simplified implementation of GAIN concept)\n   */ static async imputeWithNeuralNetwork(data, config) {\n        // Simplified neural network approach - in production, would use TensorFlow.js\n        const imputedData = JSON.parse(JSON.stringify(data));\n        const imputedFields = [];\n        const columns = Object.keys(data[0]);\n        // Convert to numeric matrix for neural network processing\n        const { matrix, columnInfo } = this.prepareDataMatrix(data, columns);\n        if (matrix.length === 0) {\n            return this.buildImputationResult(imputedData, imputedFields, [\n                \"neural_network\"\n            ]);\n        }\n        // Simple autoencoder-style imputation\n        for(let colIdx = 0; colIdx < columns.length; colIdx++){\n            const targetColumn = columns[colIdx];\n            const missingRows = matrix.map((row, idx)=>({\n                    row,\n                    idx\n                })).filter(({ row })=>isNaN(row[colIdx])).map(({ idx })=>idx);\n            if (missingRows.length === 0) continue;\n            // Use other columns to predict missing values\n            const completeRows = matrix.filter((row)=>!isNaN(row[colIdx]));\n            if (completeRows.length < 3) continue;\n            // Simplified neural network prediction (would be replaced with actual NN in production)\n            for (const missingRowIdx of missingRows){\n                const missingRow = matrix[missingRowIdx];\n                const predictions = [];\n                // Find similar complete rows based on available features\n                for (const completeRow of completeRows){\n                    let similarity = 0;\n                    let validComparisons = 0;\n                    for(let i = 0; i < columns.length; i++){\n                        if (i !== colIdx && !isNaN(missingRow[i]) && !isNaN(completeRow[i])) {\n                            similarity += 1 - Math.abs(missingRow[i] - completeRow[i]) / (1 + Math.abs(missingRow[i]) + Math.abs(completeRow[i]));\n                            validComparisons++;\n                        }\n                    }\n                    if (validComparisons > 0) {\n                        predictions.push({\n                            value: completeRow[colIdx],\n                            weight: similarity / validComparisons\n                        });\n                    }\n                }\n                if (predictions.length === 0) continue;\n                // Weighted average prediction\n                const totalWeight = predictions.reduce((sum, p)=>sum + p.weight, 0);\n                let imputedValue = predictions.reduce((sum, p)=>sum + p.value * p.weight, 0) / totalWeight;\n                // Convert back to original scale if needed\n                if (columnInfo[colIdx].isNormalized) {\n                    imputedValue = imputedValue * (columnInfo[colIdx].max - columnInfo[colIdx].min) + columnInfo[colIdx].min;\n                }\n                // Apply to original data\n                const confidence = Math.min(0.95, Math.max(0.6, totalWeight / predictions.length));\n                imputedData[missingRowIdx][targetColumn] = columnInfo[colIdx].isNumeric ? imputedValue : columnInfo[colIdx].valueMap[Math.round(imputedValue)];\n                if (config.mark_imputed) {\n                    imputedData[missingRowIdx][`${targetColumn}_imputed`] = true;\n                }\n                imputedFields.push({\n                    field: targetColumn,\n                    originalValue: data[missingRowIdx][targetColumn],\n                    imputedValue: imputedData[missingRowIdx][targetColumn],\n                    confidence,\n                    method: \"neural_network\",\n                    rowIndex: missingRowIdx\n                });\n            }\n        }\n        return this.buildImputationResult(imputedData, imputedFields, [\n            \"neural_network\"\n        ]);\n    }\n    /**\n   * Multiple Imputation by Chained Equations (MICE)\n   */ static imputeWithMICE(data, config) {\n        const imputedData = JSON.parse(JSON.stringify(data));\n        const imputedFields = [];\n        const columns = Object.keys(data[0]);\n        const maxIterations = config.max_iterations;\n        // Initialize missing values with mean/mode\n        this.initializeMissingValues(imputedData, columns);\n        // Iterative imputation\n        for(let iteration = 0; iteration < maxIterations; iteration++){\n            let hasChanges = false;\n            for (const targetColumn of columns){\n                const missingIndices = data.map((row, idx)=>({\n                        row,\n                        idx\n                    })).filter(({ row })=>row[targetColumn] === null || row[targetColumn] === undefined || row[targetColumn] === \"\").map(({ idx })=>idx);\n                if (missingIndices.length === 0) continue;\n                const otherColumns = columns.filter((col)=>col !== targetColumn);\n                // Use regression to predict missing values\n                const { coefficients } = this.simpleLinearRegression(imputedData.filter((_, idx)=>!missingIndices.includes(idx)), otherColumns.filter((col)=>{\n                    const values = imputedData.map((row)=>row[col]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n                    return values.length > 0 && values.every((val)=>!isNaN(parseFloat(val)));\n                }), targetColumn);\n                if (!coefficients) continue;\n                // Apply new predictions\n                for (const missingIdx of missingIndices){\n                    const row = imputedData[missingIdx];\n                    let newValue = coefficients.intercept;\n                    let validPrediction = true;\n                    for(let i = 0; i < coefficients.slopes.length; i++){\n                        const colName = otherColumns[i];\n                        if (row[colName] === null || row[colName] === undefined || isNaN(parseFloat(row[colName]))) {\n                            validPrediction = false;\n                            break;\n                        }\n                        newValue += coefficients.slopes[i] * parseFloat(row[colName]);\n                    }\n                    if (validPrediction && row[targetColumn] !== newValue) {\n                        const oldValue = row[targetColumn];\n                        row[targetColumn] = newValue;\n                        hasChanges = true;\n                        // Track this imputation (only on final iteration)\n                        if (iteration === maxIterations - 1) {\n                            imputedFields.push({\n                                field: targetColumn,\n                                originalValue: data[missingIdx][targetColumn],\n                                imputedValue: newValue,\n                                confidence: Math.max(0.7, 1 - iteration / maxIterations),\n                                method: \"mice\",\n                                rowIndex: missingIdx\n                            });\n                            if (config.mark_imputed) {\n                                row[`${targetColumn}_imputed`] = true;\n                            }\n                        }\n                    }\n                }\n            }\n            // Convergence check\n            if (!hasChanges) break;\n        }\n        return this.buildImputationResult(imputedData, imputedFields, [\n            \"mice\"\n        ]);\n    }\n    // Helper methods\n    static analyzeFieldMissingPattern(data, field, allColumns) {\n        const missingRows = data.filter((row)=>row[field] === null || row[field] === undefined || row[field] === \"\");\n        const missingCount = missingRows.length;\n        const missingPercentage = missingCount / data.length * 100;\n        // Analyze correlations with other missing fields\n        const correlatedWith = [];\n        const predictors = [];\n        for (const otherField of allColumns){\n            if (otherField === field) continue;\n            // Check correlation with missing pattern\n            const otherMissingRows = data.filter((row)=>row[otherField] === null || row[otherField] === undefined || row[otherField] === \"\");\n            const commonMissing = missingRows.filter((row)=>otherMissingRows.includes(row)).length;\n            if (commonMissing > missingCount * 0.3) {\n                correlatedWith.push(otherField);\n            }\n            // Check if this field could predict the missing field\n            const completeRows = data.filter((row)=>row[field] !== null && row[field] !== undefined && row[field] !== \"\" && row[otherField] !== null && row[otherField] !== undefined && row[otherField] !== \"\");\n            if (completeRows.length > data.length * 0.5) {\n                predictors.push(otherField);\n            }\n        }\n        // Determine pattern type\n        let pattern = \"random\";\n        if (correlatedWith.length > 0) {\n            pattern = \"correlated\";\n        } else if (missingPercentage > 50 || predictors.length < 2) {\n            pattern = \"systematic\";\n        }\n        const confidence = predictors.length > 0 ? Math.min(0.9, predictors.length / allColumns.length * 2) : 0.3;\n        return {\n            field,\n            missingCount,\n            missingPercentage,\n            pattern,\n            correlatedWith,\n            predictors,\n            confidence\n        };\n    }\n    static calculateDistance(row1, row2, columns) {\n        let distance = 0;\n        let validComparisons = 0;\n        for (const col of columns){\n            const val1 = row1[col];\n            const val2 = row2[col];\n            if (val1 === null || val1 === undefined || val1 === \"\" || val2 === null || val2 === undefined || val2 === \"\") {\n                continue;\n            }\n            if (!isNaN(parseFloat(val1)) && !isNaN(parseFloat(val2))) {\n                // Numeric distance\n                const num1 = parseFloat(val1);\n                const num2 = parseFloat(val2);\n                distance += Math.abs(num1 - num2);\n            } else {\n                // Categorical distance\n                distance += val1 === val2 ? 0 : 1;\n            }\n            validComparisons++;\n        }\n        return validComparisons > 0 ? distance / validComparisons : Infinity;\n    }\n    static simpleLinearRegression(data, predictorColumns, targetColumn) {\n        const validRows = data.filter((row)=>row[targetColumn] !== null && row[targetColumn] !== undefined && row[targetColumn] !== \"\" && predictorColumns.every((col)=>row[col] !== null && row[col] !== undefined && row[col] !== \"\"));\n        if (validRows.length < 3) {\n            return {\n                coefficients: null,\n                rSquared: 0\n            };\n        }\n        // Simple multiple linear regression implementation\n        const y = validRows.map((row)=>parseFloat(row[targetColumn]));\n        const X = validRows.map((row)=>predictorColumns.map((col)=>parseFloat(row[col])));\n        // Add intercept column\n        X.forEach((row)=>row.unshift(1));\n        // Calculate coefficients using normal equation: (X'X)^-1 * X'y\n        const XTranspose = this.transposeMatrix(X);\n        const XTX = this.multiplyMatrices(XTranspose, X);\n        const XTy = this.multiplyMatrixVector(XTranspose, y);\n        const coefficients = this.solveLinearSystem(XTX, XTy);\n        if (!coefficients) {\n            return {\n                coefficients: null,\n                rSquared: 0\n            };\n        }\n        // Calculate R-squared\n        const predictions = X.map((row)=>row.reduce((sum, val, idx)=>sum + val * coefficients[idx], 0));\n        const yMean = y.reduce((sum, val)=>sum + val, 0) / y.length;\n        const totalSumSquares = y.reduce((sum, val)=>sum + Math.pow(val - yMean, 2), 0);\n        const residualSumSquares = y.reduce((sum, val, idx)=>sum + Math.pow(val - predictions[idx], 2), 0);\n        const rSquared = totalSumSquares > 0 ? 1 - residualSumSquares / totalSumSquares : 0;\n        return {\n            coefficients: {\n                intercept: coefficients[0],\n                slopes: coefficients.slice(1)\n            },\n            rSquared: Math.max(0, Math.min(1, rSquared))\n        };\n    }\n    static buildSimpleDecisionTree(data, predictorColumns, targetColumn) {\n        const validData = data.filter((row)=>row[targetColumn] !== null && row[targetColumn] !== undefined && row[targetColumn] !== \"\" && predictorColumns.some((col)=>row[col] !== null && row[col] !== undefined && row[col] !== \"\"));\n        if (validData.length < 3) return null;\n        // Simple tree: find best single split\n        let bestSplit = null;\n        let bestScore = -Infinity;\n        for (const col of predictorColumns){\n            const values = validData.map((row)=>row[col]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n            if (values.length === 0) continue;\n            if (values.every((val)=>!isNaN(parseFloat(val)))) {\n                // Numeric split\n                const numValues = values.map((val)=>parseFloat(val)).sort((a, b)=>a - b);\n                const splitPoint = numValues[Math.floor(numValues.length / 2)];\n                const leftGroup = validData.filter((row)=>parseFloat(row[col]) <= splitPoint);\n                const rightGroup = validData.filter((row)=>parseFloat(row[col]) > splitPoint);\n                const score = this.calculateSplitScore(leftGroup, rightGroup, targetColumn);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestSplit = {\n                        column: col,\n                        splitPoint,\n                        type: \"numeric\"\n                    };\n                }\n            }\n        }\n        if (!bestSplit) return null;\n        const leftValue = this.calculateGroupValue(validData.filter((row)=>parseFloat(row[bestSplit.column]) <= bestSplit.splitPoint), targetColumn);\n        const rightValue = this.calculateGroupValue(validData.filter((row)=>parseFloat(row[bestSplit.column]) > bestSplit.splitPoint), targetColumn);\n        return {\n            split: bestSplit,\n            leftValue,\n            rightValue\n        };\n    }\n    static predictWithTree(tree, row) {\n        if (!tree || !tree.split) return null;\n        const value = row[tree.split.column];\n        if (value === null || value === undefined || value === \"\") return null;\n        if (tree.split.type === \"numeric\") {\n            return parseFloat(value) <= tree.split.splitPoint ? tree.leftValue : tree.rightValue;\n        }\n        return tree.leftValue; // Fallback\n    }\n    static calculateSplitScore(leftGroup, rightGroup, targetColumn) {\n        if (leftGroup.length === 0 || rightGroup.length === 0) return -Infinity;\n        const leftValues = leftGroup.map((row)=>row[targetColumn]);\n        const rightValues = rightGroup.map((row)=>row[targetColumn]);\n        // Simple variance reduction score\n        const totalVariance = this.calculateVariance([\n            ...leftValues,\n            ...rightValues\n        ]);\n        const leftVariance = this.calculateVariance(leftValues);\n        const rightVariance = this.calculateVariance(rightValues);\n        const weightedVariance = (leftGroup.length * leftVariance + rightGroup.length * rightVariance) / (leftGroup.length + rightGroup.length);\n        return totalVariance - weightedVariance;\n    }\n    static calculateVariance(values) {\n        if (values.length === 0) return 0;\n        const numValues = values.filter((val)=>!isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n        if (numValues.length === 0) return 0;\n        const mean = numValues.reduce((sum, val)=>sum + val, 0) / numValues.length;\n        return numValues.reduce((sum, val)=>sum + Math.pow(val - mean, 2), 0) / numValues.length;\n    }\n    static calculateGroupValue(group, targetColumn) {\n        if (group.length === 0) return null;\n        const values = group.map((row)=>row[targetColumn]);\n        const numValues = values.filter((val)=>!isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n        if (numValues.length === values.length && numValues.length > 0) {\n            // Numeric - return mean\n            return numValues.reduce((sum, val)=>sum + val, 0) / numValues.length;\n        } else {\n            // Categorical - return mode\n            const counts = values.reduce((acc, val)=>{\n                acc[val] = (acc[val] || 0) + 1;\n                return acc;\n            }, {});\n            return Object.keys(counts).reduce((a, b)=>counts[a] > counts[b] ? a : b);\n        }\n    }\n    static prepareDataMatrix(data, columns) {\n        const columnInfo = columns.map((col)=>{\n            const values = data.map((row)=>row[col]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n            const numericValues = values.filter((val)=>!isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n            if (numericValues.length === values.length && numericValues.length > 0) {\n                const min = Math.min(...numericValues);\n                const max = Math.max(...numericValues);\n                return {\n                    isNumeric: true,\n                    isNormalized: max > min,\n                    min,\n                    max,\n                    valueMap: null\n                };\n            } else {\n                const uniqueValues = Array.from(new Set(values));\n                const valueMap = uniqueValues.reduce((map, val, idx)=>{\n                    map[idx] = val;\n                    return map;\n                }, {});\n                return {\n                    isNumeric: false,\n                    isNormalized: false,\n                    min: 0,\n                    max: uniqueValues.length - 1,\n                    valueMap\n                };\n            }\n        });\n        const matrix = data.map((row)=>{\n            return columns.map((col, idx)=>{\n                const value = row[col];\n                if (value === null || value === undefined || value === \"\") {\n                    return NaN;\n                }\n                if (columnInfo[idx].isNumeric) {\n                    const num = parseFloat(value);\n                    return columnInfo[idx].isNormalized ? (num - columnInfo[idx].min) / (columnInfo[idx].max - columnInfo[idx].min) : num;\n                } else {\n                    const uniqueValues = Object.values(columnInfo[idx].valueMap);\n                    const index = uniqueValues.indexOf(value);\n                    return index >= 0 ? index : NaN;\n                }\n            });\n        });\n        return {\n            matrix,\n            columnInfo\n        };\n    }\n    static initializeMissingValues(data, columns) {\n        for (const col of columns){\n            const values = data.map((row)=>row[col]).filter((val)=>val !== null && val !== undefined && val !== \"\");\n            if (values.length === 0) continue;\n            let defaultValue;\n            const numericValues = values.filter((val)=>!isNaN(parseFloat(val))).map((val)=>parseFloat(val));\n            if (numericValues.length === values.length && numericValues.length > 0) {\n                // Use median for numeric\n                const sorted = numericValues.sort((a, b)=>a - b);\n                const mid = Math.floor(sorted.length / 2);\n                defaultValue = sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n            } else {\n                // Use mode for categorical\n                const counts = values.reduce((acc, val)=>{\n                    acc[val] = (acc[val] || 0) + 1;\n                    return acc;\n                }, {});\n                defaultValue = Object.keys(counts).reduce((a, b)=>counts[a] > counts[b] ? a : b);\n            }\n            // Apply default value to missing entries\n            for (const row of data){\n                if (row[col] === null || row[col] === undefined || row[col] === \"\") {\n                    row[col] = defaultValue;\n                }\n            }\n        }\n    }\n    static transposeMatrix(matrix) {\n        if (matrix.length === 0) return [];\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    static multiplyMatrices(a, b) {\n        const result = Array(a.length).fill(null).map(()=>Array(b[0].length).fill(0));\n        for(let i = 0; i < a.length; i++){\n            for(let j = 0; j < b[0].length; j++){\n                for(let k = 0; k < b.length; k++){\n                    result[i][j] += a[i][k] * b[k][j];\n                }\n            }\n        }\n        return result;\n    }\n    static multiplyMatrixVector(matrix, vector) {\n        return matrix.map((row)=>row.reduce((sum, val, idx)=>sum + val * vector[idx], 0));\n    }\n    static solveLinearSystem(A, b) {\n        // Simple Gaussian elimination\n        const n = A.length;\n        const augmented = A.map((row, i)=>[\n                ...row,\n                b[i]\n            ]);\n        // Forward elimination\n        for(let i = 0; i < n; i++){\n            // Find pivot\n            let maxRow = i;\n            for(let k = i + 1; k < n; k++){\n                if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n                    maxRow = k;\n                }\n            }\n            // Swap rows\n            [augmented[i], augmented[maxRow]] = [\n                augmented[maxRow],\n                augmented[i]\n            ];\n            // Check for singular matrix\n            if (Math.abs(augmented[i][i]) < 1e-10) {\n                return null;\n            }\n            // Eliminate\n            for(let k = i + 1; k < n; k++){\n                const factor = augmented[k][i] / augmented[i][i];\n                for(let j = i; j <= n; j++){\n                    augmented[k][j] -= factor * augmented[i][j];\n                }\n            }\n        }\n        // Back substitution\n        const solution = new Array(n);\n        for(let i = n - 1; i >= 0; i--){\n            solution[i] = augmented[i][n];\n            for(let j = i + 1; j < n; j++){\n                solution[i] -= augmented[i][j] * solution[j];\n            }\n            solution[i] /= augmented[i][i];\n        }\n        return solution;\n    }\n    static buildImputationResult(data, imputedFields, methods) {\n        const totalMissing = imputedFields.length;\n        const totalImputed = imputedFields.length;\n        const averageConfidence = totalImputed > 0 ? imputedFields.reduce((sum, field)=>sum + field.confidence, 0) / totalImputed : 0;\n        // Calculate quality metrics\n        const completeness = 100; // All missing data is now filled\n        const reliability = averageConfidence * 100;\n        const consistency = Math.min(100, 80 + averageConfidence * 20); // Consistency based on confidence\n        return {\n            data,\n            imputedFields,\n            statistics: {\n                totalMissing,\n                totalImputed,\n                methodsUsed: methods,\n                averageConfidence\n            },\n            qualityMetrics: {\n                completeness,\n                reliability,\n                consistency\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/missing-data-imputation.ts\n");

/***/ }),

/***/ "(rsc)/./types/data-schema.ts":
/*!******************************!*\
  !*** ./types/data-schema.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_MAPPING_TEMPLATES: () => (/* binding */ DATA_MAPPING_TEMPLATES)\n/* harmony export */ });\n// Comprehensive data schema types for NetWORX Essentials operational reporting\n// Predefined data mapping templates\nconst DATA_MAPPING_TEMPLATES = [\n    {\n        name: \"Network Footprint & Capacity\",\n        description: \"DC square footage, facility capacity, storage utilization data\",\n        targetCategory: \"operationalReporting\",\n        targetSubcategory: \"networkFootprintCapacity\",\n        mappings: [\n            {\n                sourceColumn: \"DC Sq Ft\",\n                targetField: \"dcSqFt\",\n                dataType: \"number\",\n                required: true\n            },\n            {\n                sourceColumn: \"Facility Capacity\",\n                targetField: \"facilityCapacity\",\n                dataType: \"number\",\n                required: true\n            },\n            {\n                sourceColumn: \"Storage Space Utilized\",\n                targetField: \"storageSpaceUtilized\",\n                dataType: \"number\",\n                required: false\n            },\n            {\n                sourceColumn: \"Dock Door Availability\",\n                targetField: \"dockDoorAvailability\",\n                dataType: \"number\",\n                required: false\n            }\n        ],\n        requiredColumns: [\n            \"DC Sq Ft\",\n            \"Facility Capacity\"\n        ],\n        optionalColumns: [\n            \"Storage Space Utilized\",\n            \"Dock Door Availability\",\n            \"SKU Count per DC\"\n        ]\n    },\n    {\n        name: \"Order & Payment Data\",\n        description: \"Customer orders, freight class, delivery quantities\",\n        targetCategory: \"operationalReporting\",\n        targetSubcategory: \"orderPaymentData\",\n        mappings: [\n            {\n                sourceColumn: \"Customer Name\",\n                targetField: \"customerName\",\n                dataType: \"string\",\n                required: true\n            },\n            {\n                sourceColumn: \"Freight Class\",\n                targetField: \"freightClass\",\n                dataType: \"string\",\n                required: false\n            },\n            {\n                sourceColumn: \"Order Delivery Quantities\",\n                targetField: \"orderDeliveryQuantities\",\n                dataType: \"number\",\n                required: true\n            },\n            {\n                sourceColumn: \"Shipment Weight\",\n                targetField: \"shipmentWeight\",\n                dataType: \"number\",\n                required: false\n            }\n        ],\n        requiredColumns: [\n            \"Customer Name\",\n            \"Order Delivery Quantities\"\n        ],\n        optionalColumns: [\n            \"Freight Class\",\n            \"Shipment Weight\",\n            \"Customer Ship-To Region\"\n        ]\n    },\n    {\n        name: \"Cost & Financial Data\",\n        description: \"Warehouse operating costs, lease costs, inventory carrying costs\",\n        targetCategory: \"businessFinancials\",\n        targetSubcategory: \"costFinancialData\",\n        mappings: [\n            {\n                sourceColumn: \"Warehouse Operating Cost\",\n                targetField: \"warehouseOperatingCost\",\n                dataType: \"number\",\n                required: true\n            },\n            {\n                sourceColumn: \"Lease or Purchase Cost\",\n                targetField: \"leaseOrPurchaseCost\",\n                dataType: \"number\",\n                required: false\n            },\n            {\n                sourceColumn: \"Inventory Carrying Cost\",\n                targetField: \"inventoryCarryingCost\",\n                dataType: \"number\",\n                required: false\n            },\n            {\n                sourceColumn: \"Carrier Cost\",\n                targetField: \"carrierCost\",\n                dataType: \"number\",\n                required: false\n            }\n        ],\n        requiredColumns: [\n            \"Warehouse Operating Cost\"\n        ],\n        optionalColumns: [\n            \"Lease or Purchase Cost\",\n            \"Inventory Carrying Cost\",\n            \"Carrier Cost\"\n        ]\n    },\n    {\n        name: \"Historical Sales Data\",\n        description: \"Historical sales data, customer-level data, SKU sales velocity\",\n        targetCategory: \"salesGrowthTrajectory\",\n        targetSubcategory: \"historicalSalesData\",\n        mappings: [\n            {\n                sourceColumn: \"Historical Sales Data\",\n                targetField: \"historicalSalesData\",\n                dataType: \"number\",\n                required: true\n            },\n            {\n                sourceColumn: \"SKU Sales Velocity\",\n                targetField: \"skuSalesVelocity\",\n                dataType: \"number\",\n                required: false\n            },\n            {\n                sourceColumn: \"Customer Order History\",\n                targetField: \"customerOrderHistory\",\n                dataType: \"number\",\n                required: false\n            },\n            {\n                sourceColumn: \"SKU Total Value\",\n                targetField: \"skuTotalValue\",\n                dataType: \"number\",\n                required: false\n            }\n        ],\n        requiredColumns: [\n            \"Historical Sales Data\"\n        ],\n        optionalColumns: [\n            \"SKU Sales Velocity\",\n            \"Customer Order History\",\n            \"SKU Total Value\"\n        ]\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9kYXRhLXNjaGVtYS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0VBQStFO0FBa04vRSxvQ0FBb0M7QUFDN0IsTUFBTUEseUJBQWdEO0lBQzNEO1FBQ0VDLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxnQkFBZ0I7UUFDaEJDLG1CQUFtQjtRQUNuQkMsVUFBVTtZQUNSO2dCQUFFQyxjQUFjO2dCQUFZQyxhQUFhO2dCQUFVQyxVQUFVO2dCQUFVQyxVQUFVO1lBQUs7WUFDdEY7Z0JBQUVILGNBQWM7Z0JBQXFCQyxhQUFhO2dCQUFvQkMsVUFBVTtnQkFBVUMsVUFBVTtZQUFLO1lBQ3pHO2dCQUFFSCxjQUFjO2dCQUEwQkMsYUFBYTtnQkFBd0JDLFVBQVU7Z0JBQVVDLFVBQVU7WUFBTTtZQUNuSDtnQkFBRUgsY0FBYztnQkFBMEJDLGFBQWE7Z0JBQXdCQyxVQUFVO2dCQUFVQyxVQUFVO1lBQU07U0FDcEg7UUFDREMsaUJBQWlCO1lBQUM7WUFBWTtTQUFvQjtRQUNsREMsaUJBQWlCO1lBQUM7WUFBMEI7WUFBMEI7U0FBbUI7SUFDM0Y7SUFDQTtRQUNFVixNQUFNO1FBQ05DLGFBQWE7UUFDYkMsZ0JBQWdCO1FBQ2hCQyxtQkFBbUI7UUFDbkJDLFVBQVU7WUFDUjtnQkFBRUMsY0FBYztnQkFBaUJDLGFBQWE7Z0JBQWdCQyxVQUFVO2dCQUFVQyxVQUFVO1lBQUs7WUFDakc7Z0JBQUVILGNBQWM7Z0JBQWlCQyxhQUFhO2dCQUFnQkMsVUFBVTtnQkFBVUMsVUFBVTtZQUFNO1lBQ2xHO2dCQUFFSCxjQUFjO2dCQUE2QkMsYUFBYTtnQkFBMkJDLFVBQVU7Z0JBQVVDLFVBQVU7WUFBSztZQUN4SDtnQkFBRUgsY0FBYztnQkFBbUJDLGFBQWE7Z0JBQWtCQyxVQUFVO2dCQUFVQyxVQUFVO1lBQU07U0FDdkc7UUFDREMsaUJBQWlCO1lBQUM7WUFBaUI7U0FBNEI7UUFDL0RDLGlCQUFpQjtZQUFDO1lBQWlCO1lBQW1CO1NBQTBCO0lBQ2xGO0lBQ0E7UUFDRVYsTUFBTTtRQUNOQyxhQUFhO1FBQ2JDLGdCQUFnQjtRQUNoQkMsbUJBQW1CO1FBQ25CQyxVQUFVO1lBQ1I7Z0JBQUVDLGNBQWM7Z0JBQTRCQyxhQUFhO2dCQUEwQkMsVUFBVTtnQkFBVUMsVUFBVTtZQUFLO1lBQ3RIO2dCQUFFSCxjQUFjO2dCQUEwQkMsYUFBYTtnQkFBdUJDLFVBQVU7Z0JBQVVDLFVBQVU7WUFBTTtZQUNsSDtnQkFBRUgsY0FBYztnQkFBMkJDLGFBQWE7Z0JBQXlCQyxVQUFVO2dCQUFVQyxVQUFVO1lBQU07WUFDckg7Z0JBQUVILGNBQWM7Z0JBQWdCQyxhQUFhO2dCQUFlQyxVQUFVO2dCQUFVQyxVQUFVO1lBQU07U0FDakc7UUFDREMsaUJBQWlCO1lBQUM7U0FBMkI7UUFDN0NDLGlCQUFpQjtZQUFDO1lBQTBCO1lBQTJCO1NBQWU7SUFDeEY7SUFDQTtRQUNFVixNQUFNO1FBQ05DLGFBQWE7UUFDYkMsZ0JBQWdCO1FBQ2hCQyxtQkFBbUI7UUFDbkJDLFVBQVU7WUFDUjtnQkFBRUMsY0FBYztnQkFBeUJDLGFBQWE7Z0JBQXVCQyxVQUFVO2dCQUFVQyxVQUFVO1lBQUs7WUFDaEg7Z0JBQUVILGNBQWM7Z0JBQXNCQyxhQUFhO2dCQUFvQkMsVUFBVTtnQkFBVUMsVUFBVTtZQUFNO1lBQzNHO2dCQUFFSCxjQUFjO2dCQUEwQkMsYUFBYTtnQkFBd0JDLFVBQVU7Z0JBQVVDLFVBQVU7WUFBTTtZQUNuSDtnQkFBRUgsY0FBYztnQkFBbUJDLGFBQWE7Z0JBQWlCQyxVQUFVO2dCQUFVQyxVQUFVO1lBQU07U0FDdEc7UUFDREMsaUJBQWlCO1lBQUM7U0FBd0I7UUFDMUNDLGlCQUFpQjtZQUFDO1lBQXNCO1lBQTBCO1NBQWtCO0lBQ3RGO0NBQ0QsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25ldHdvcngtZXNzZW50aWFscy8uL3R5cGVzL2RhdGEtc2NoZW1hLnRzPzhjMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29tcHJlaGVuc2l2ZSBkYXRhIHNjaGVtYSB0eXBlcyBmb3IgTmV0V09SWCBFc3NlbnRpYWxzIG9wZXJhdGlvbmFsIHJlcG9ydGluZ1xuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFGaWVsZCB7XG4gIHByaW1hcnlDYXRlZ29yeTogc3RyaW5nO1xuICBzZWNvbmRhcnlDYXRlZ29yeTogc3RyaW5nO1xuICBkYXRhRmllbGQ6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgdXNlUmVhc29uOiBzdHJpbmc7XG59XG5cbi8vIE9wZXJhdGlvbmFsIFJlcG9ydGluZyBDYXRlZ29yaWVzXG5leHBvcnQgaW50ZXJmYWNlIE5ldHdvcmtGb290cHJpbnRDYXBhY2l0eSB7XG4gIGRjU3FGdD86IG51bWJlcjtcbiAgZmFjaWxpdHlDYXBhY2l0eT86IG51bWJlcjtcbiAgc3RvcmFnZVNwYWNlVXRpbGl6ZWQ/OiBudW1iZXI7XG4gIGRvY2tEb29yQXZhaWxhYmlsaXR5PzogbnVtYmVyO1xuICBza3VDb3VudFBlckRjPzogbnVtYmVyO1xuICBzaGlwbWVudHNQZXJEYXk/OiBudW1iZXI7XG4gIHJlY2VpdmVkUGFsbGV0cz86IG51bWJlcjtcbiAgc2hpcHBlZFBhbGxldHM/OiBudW1iZXI7XG4gIGludmVudG9yeVRocm91Z2hwdXQ/OiBudW1iZXI7XG4gIG9yZGVyRnVsZmlsbG1lbnRUaW1lPzogbnVtYmVyO1xuICBpbnZlbnRvcnlWYWx1ZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcmRlclBheW1lbnREYXRhIHtcbiAgY3VzdG9tZXJOYW1lPzogc3RyaW5nO1xuICBmcmVpZ2h0Q2xhc3M/OiBzdHJpbmc7XG4gIG9yZGVyRGVsaXZlcnlRdWFudGl0aWVzPzogbnVtYmVyO1xuICBzaGlwbWVudFdlaWdodD86IG51bWJlcjtcbiAgc2hpcG1lbnREaW1lbnNpb25zPzogc3RyaW5nO1xuICBjdXN0b21lclNoaXBUb1JlZ2lvbj86IHN0cmluZztcbiAgb3JkZXJTaGlwTWV0aG9kcz86IHN0cmluZztcbiAgY3VzdG9tZXJPcmRlck51bWJlcj86IG51bWJlcjtcbiAgbG9jYXRpb25TaGlwcGluZ1RvPzogc3RyaW5nO1xuICBza3VEZW1hbmQ/OiBudW1iZXI7XG4gIHRvdGFsTnVtYmVyT2ZVbml0cz86IG51bWJlcjtcbiAgaW52ZW50b3J5T25IYW5kPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9yZGVyU2hpcG1lbnREYXRhIHtcbiAgZmFjaWxpdHlEY1JlZ0xvY2F0aW9uPzogc3RyaW5nO1xuICBwdXJjaGFzZU9yZGVyTnVtYmVyPzogbnVtYmVyO1xuICByZWNlaXZlZFNoaXBtZW50TG9jYXRpb25zPzogc3RyaW5nO1xuICBpbmJvdW5kUHVyY2hhc2VPcmRlckRhdGE/OiBzdHJpbmc7XG4gIHNrdVF1YW50aXR5UGVyRWFjaD86IG51bWJlcjtcbiAgb3JkZXJTaGlwbWVudERhdGFGcm9tRGM/OiBzdHJpbmc7XG4gIG9yZGVyRnVsZmlsbG1lbnRUaW1lPzogbnVtYmVyO1xuICBvcmRlckZ1bGZpbGxtZW50Q3ljbGVTb2x1dGlvbj86IHN0cmluZztcbiAgYWN0dWFsU2hpcG1lbnREYXRhRnJvbURjPzogc3RyaW5nO1xuICBvcmRlclJlY2VpdmVkQXREYz86IHN0cmluZztcbiAgY3VzdG9tZXJTaGlwVG9SZWdpb24/OiBzdHJpbmc7XG4gIHJvdXRlRGNUb0N1c3RvbWVyPzogc3RyaW5nO1xuICBza3VEZW1hbmQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uYWxQZXJmb3JtYW5jZU1ldHJpY3Mge1xuICBzaGlwbWVudFF1YWxpdHlQZXJjZW50YWdlPzogbnVtYmVyO1xuICBsaW5lSXRlbUFjY3VyYWN5PzogbnVtYmVyO1xuICBpbnZlbnRvcnlBY2N1cmFjeT86IG51bWJlcjtcbiAgaW52ZW50b3J5Q291bnQ/OiBudW1iZXI7XG4gIG9uVGltZURlbGl2ZXJ5VGltZT86IG51bWJlcjtcbiAgY3VzdG9tZXJDb21wbGFpbnQ/OiBudW1iZXI7XG4gIHNoaXBwZWRQZXJmZWN0T3JkZXI/OiBudW1iZXI7XG4gIHRvdGFsTnVtYmVyT2ZVbml0c09yT3JkZXI/OiBudW1iZXI7XG4gIHNoaXBtZW50T3RkUGVyY2VudGFnZT86IG51bWJlcjtcbiAgaW52ZW50b3J5VHVybnM/OiBudW1iZXI7XG4gIGludmVudG9yeVNlcnZpY2U/OiBudW1iZXI7XG4gIGNhcGFjaXR5VXRpbGl6YXRpb24/OiBudW1iZXI7XG4gIGNhcGFjaXR5VXRpbGl6YXRpb25QZXJjZW50YWdlPzogbnVtYmVyO1xufVxuXG4vLyBCdXNpbmVzcyBGaW5hbmNpYWxzIENhdGVnb3JpZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29zdEZpbmFuY2lhbERhdGEge1xuICB3YXJlaG91c2VPcGVyYXRpbmdDb3N0PzogbnVtYmVyO1xuICBsZWFzZU9yUHVyY2hhc2VDb3N0PzogbnVtYmVyO1xuICBpbnZlbnRvcnlDYXJyeWluZ0Nvc3Q/OiBudW1iZXI7XG4gIGNhcnJpZXJDb3N0PzogbnVtYmVyO1xuICBmcmVpZ2h0Q29zdFBlckxiPzogbnVtYmVyO1xuICBvcGVyYXRpb25hbFN0YXRlbWVudFJldkFjdHVhbEJ1ZGdldD86IHN0cmluZztcbiAgb3BlcmF0aW9uYWxTdGF0ZW1lbnRzPzogc3RyaW5nO1xufVxuXG4vLyBTYWxlcyBHcm93dGggVHJhamVjdG9yeSBDYXRlZ29yaWVzXG5leHBvcnQgaW50ZXJmYWNlIEhpc3RvcmljYWxTYWxlc0RhdGEge1xuICBoaXN0b3JpY2FsU2FsZXNEYXRhPzogbnVtYmVyO1xuICBoaXN0b3JpY2FsU2FsZXNEYXRhQ3VzdG9tZXJMZXZlbD86IG51bWJlcjtcbiAgc2t1U2FsZXNWZWxvY2l0eT86IG51bWJlcjtcbiAgY3VzdG9tZXJPcmRlckhpc3Rvcnk/OiBudW1iZXI7XG4gIHNrdVRvdGFsVmFsdWU/OiBudW1iZXI7XG4gIHNhbGVzQ2hhbm5lbD86IHN0cmluZztcbiAgZm9yZWNhc3REZW1hbmQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVtYW5kUHJvamVjdGlvbkZvcmVjYXN0IHtcbiAgY2hhbm5lbFNlZ21lbnRzPzogc3RyaW5nO1xuICBkZW1hbmRGb3JlY2FzdD86IHN0cmluZztcbiAgZm9yZWNhc3RVbml0cz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcm93dGhGb3JlY2FzdCB7XG4gIGZvcmVjYXN0VW5pdHM/OiBudW1iZXI7XG59XG5cbi8vIENvbWJpbmVkIG9wZXJhdGlvbmFsIGRhdGEgc3RydWN0dXJlXG5leHBvcnQgaW50ZXJmYWNlIE9wZXJhdGlvbmFsUmVwb3J0aW5nRGF0YSB7XG4gIG5ldHdvcmtGb290cHJpbnRDYXBhY2l0eT86IE5ldHdvcmtGb290cHJpbnRDYXBhY2l0eTtcbiAgb3JkZXJQYXltZW50RGF0YT86IE9yZGVyUGF5bWVudERhdGE7XG4gIG9yZGVyU2hpcG1lbnREYXRhPzogT3JkZXJTaGlwbWVudERhdGE7XG4gIG9wZXJhdGlvbmFsUGVyZm9ybWFuY2VNZXRyaWNzPzogT3BlcmF0aW9uYWxQZXJmb3JtYW5jZU1ldHJpY3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVzaW5lc3NGaW5hbmNpYWxzRGF0YSB7XG4gIGNvc3RGaW5hbmNpYWxEYXRhPzogQ29zdEZpbmFuY2lhbERhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FsZXNHcm93dGhUcmFqZWN0b3J5RGF0YSB7XG4gIGhpc3RvcmljYWxTYWxlc0RhdGE/OiBIaXN0b3JpY2FsU2FsZXNEYXRhO1xuICBkZW1hbmRQcm9qZWN0aW9uRm9yZWNhc3Q/OiBEZW1hbmRQcm9qZWN0aW9uRm9yZWNhc3Q7XG4gIGdyb3d0aEZvcmVjYXN0PzogR3Jvd3RoRm9yZWNhc3Q7XG59XG5cbi8vIE1hc3RlciBkYXRhIHN0cnVjdHVyZSBmb3IgYWxsIGNhdGVnb3JpZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHJlaGVuc2l2ZU9wZXJhdGlvbmFsRGF0YSB7XG4gIG9wZXJhdGlvbmFsUmVwb3J0aW5nPzogT3BlcmF0aW9uYWxSZXBvcnRpbmdEYXRhO1xuICBidXNpbmVzc0ZpbmFuY2lhbHM/OiBCdXNpbmVzc0ZpbmFuY2lhbHNEYXRhO1xuICBzYWxlc0dyb3d0aFRyYWplY3Rvcnk/OiBTYWxlc0dyb3d0aFRyYWplY3RvcnlEYXRhO1xuICBtZXRhZGF0YT86IHtcbiAgICBmaWxlU291cmNlPzogc3RyaW5nO1xuICAgIGRhdGFRdWFsaXR5PzogRGF0YVF1YWxpdHlNZXRyaWNzO1xuICAgIHZhbGlkYXRpb25SZXN1bHRzPzogVmFsaWRhdGlvblJlc3VsdFtdO1xuICAgIGxhc3RQcm9jZXNzZWQ/OiBzdHJpbmc7XG4gICAgaW1wdXRhdGlvbkluZm8/OiB7XG4gICAgICBtZXRob2RVc2VkOiBzdHJpbmdbXTtcbiAgICAgIHRvdGFsSW1wdXRlZDogbnVtYmVyO1xuICAgICAgYXZlcmFnZUNvbmZpZGVuY2U6IG51bWJlcjtcbiAgICAgIHF1YWxpdHlNZXRyaWNzOiBhbnk7XG4gICAgICBpbXB1dGVkRmllbGRzOiBhbnlbXTtcbiAgICB9O1xuICAgIHByb2R1Y3Rpb25Qcm9jZXNzaW5nPzoge1xuICAgICAgY2FsY3VsYXRpb25SZXN1bHRzOiBhbnk7XG4gICAgICBxdWFsaXR5QXNzZXNzbWVudDogYW55O1xuICAgICAgcHJvY2Vzc2luZ1RpbWU6IG51bWJlcjtcbiAgICB9O1xuICAgIFtrZXk6IHN0cmluZ106IGFueTsgLy8gQWxsb3cgYWRkaXRpb25hbCBkeW5hbWljIHByb3BlcnRpZXNcbiAgfTtcbn1cblxuLy8gRGF0YSB2YWxpZGF0aW9uIHN0cnVjdHVyZXNcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVF1YWxpdHlNZXRyaWNzIHtcbiAgY29tcGxldGVuZXNzOiBudW1iZXI7IC8vIFBlcmNlbnRhZ2Ugb2YgcmVxdWlyZWQgZmllbGRzIGZpbGxlZFxuICBhY2N1cmFjeTogbnVtYmVyOyAvLyBQZXJjZW50YWdlIG9mIHZhbGlkIHZhbHVlc1xuICBjb25zaXN0ZW5jeTogbnVtYmVyOyAvLyBQZXJjZW50YWdlIG9mIGNvbnNpc3RlbnQgZGF0YSBhY3Jvc3MgZmllbGRzXG4gIHRpbWVsaW5lc3M6IG51bWJlcjsgLy8gRGF0YSBmcmVzaG5lc3Mgc2NvcmVcbiAgdmFsaWRSZWNvcmRzOiBudW1iZXI7XG4gIHRvdGFsUmVjb3JkczogbnVtYmVyO1xuICBtaXNzaW5nRmllbGRzOiBzdHJpbmdbXTtcbiAgaW52YWxpZFZhbHVlczogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZTogYW55OyByZWFzb246IHN0cmluZyB9W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvblJlc3VsdCB7XG4gIGZpZWxkOiBzdHJpbmc7XG4gIHZhbHVlOiBhbnk7XG4gIGlzVmFsaWQ6IGJvb2xlYW47XG4gIGVycm9yTWVzc2FnZT86IHN0cmluZztcbiAgc3VnZ2VzdGlvbj86IHN0cmluZztcbn1cblxuLy8gRmlsZSBwcm9jZXNzaW5nIHJlc3VsdHNcbmV4cG9ydCBpbnRlcmZhY2UgUHJvY2Vzc2luZ1Jlc3VsdCB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGRhdGE/OiBDb21wcmVoZW5zaXZlT3BlcmF0aW9uYWxEYXRhO1xuICBlcnJvcnM6IHN0cmluZ1tdO1xuICB3YXJuaW5nczogc3RyaW5nW107XG4gIHN1bW1hcnk6IHtcbiAgICB0b3RhbFJvd3M6IG51bWJlcjtcbiAgICB2YWxpZFJvd3M6IG51bWJlcjtcbiAgICBza2lwcGVkUm93czogbnVtYmVyO1xuICAgIGRhdGFRdWFsaXR5OiBEYXRhUXVhbGl0eU1ldHJpY3M7XG4gIH07XG59XG5cbi8vIERhdGEgbWFwcGluZyBjb25maWd1cmF0aW9uIGZvciBmaWxlIGltcG9ydHNcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUZpZWxkTWFwcGluZyB7XG4gIHNvdXJjZUNvbHVtbjogc3RyaW5nO1xuICB0YXJnZXRGaWVsZDogc3RyaW5nO1xuICBkYXRhVHlwZTogJ3N0cmluZycgfCAnbnVtYmVyJyB8ICdib29sZWFuJyB8ICdkYXRlJztcbiAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gIHZhbGlkYXRpb24/OiB7XG4gICAgbWluPzogbnVtYmVyO1xuICAgIG1heD86IG51bWJlcjtcbiAgICBwYXR0ZXJuPzogc3RyaW5nO1xuICAgIGFsbG93ZWRWYWx1ZXM/OiBzdHJpbmdbXTtcbiAgfTtcbiAgdHJhbnNmb3JtYXRpb24/OiB7XG4gICAgdHlwZTogJ2xvd2VyY2FzZScgfCAndXBwZXJjYXNlJyB8ICd0cmltJyB8ICdwYXJzZU51bWJlcicgfCAncGFyc2VEYXRlJztcbiAgICBmb3JtYXQ/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YU1hcHBpbmdUZW1wbGF0ZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgdGFyZ2V0Q2F0ZWdvcnk6ICdvcGVyYXRpb25hbFJlcG9ydGluZycgfCAnYnVzaW5lc3NGaW5hbmNpYWxzJyB8ICdzYWxlc0dyb3d0aFRyYWplY3RvcnknO1xuICB0YXJnZXRTdWJjYXRlZ29yeTogc3RyaW5nO1xuICBtYXBwaW5nczogRGF0YUZpZWxkTWFwcGluZ1tdO1xuICByZXF1aXJlZENvbHVtbnM6IHN0cmluZ1tdO1xuICBvcHRpb25hbENvbHVtbnM6IHN0cmluZ1tdO1xufVxuXG4vLyBQcmVkZWZpbmVkIGRhdGEgbWFwcGluZyB0ZW1wbGF0ZXNcbmV4cG9ydCBjb25zdCBEQVRBX01BUFBJTkdfVEVNUExBVEVTOiBEYXRhTWFwcGluZ1RlbXBsYXRlW10gPSBbXG4gIHtcbiAgICBuYW1lOiAnTmV0d29yayBGb290cHJpbnQgJiBDYXBhY2l0eScsXG4gICAgZGVzY3JpcHRpb246ICdEQyBzcXVhcmUgZm9vdGFnZSwgZmFjaWxpdHkgY2FwYWNpdHksIHN0b3JhZ2UgdXRpbGl6YXRpb24gZGF0YScsXG4gICAgdGFyZ2V0Q2F0ZWdvcnk6ICdvcGVyYXRpb25hbFJlcG9ydGluZycsXG4gICAgdGFyZ2V0U3ViY2F0ZWdvcnk6ICduZXR3b3JrRm9vdHByaW50Q2FwYWNpdHknLFxuICAgIG1hcHBpbmdzOiBbXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ0RDIFNxIEZ0JywgdGFyZ2V0RmllbGQ6ICdkY1NxRnQnLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ0ZhY2lsaXR5IENhcGFjaXR5JywgdGFyZ2V0RmllbGQ6ICdmYWNpbGl0eUNhcGFjaXR5JywgZGF0YVR5cGU6ICdudW1iZXInLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgeyBzb3VyY2VDb2x1bW46ICdTdG9yYWdlIFNwYWNlIFV0aWxpemVkJywgdGFyZ2V0RmllbGQ6ICdzdG9yYWdlU3BhY2VVdGlsaXplZCcsIGRhdGFUeXBlOiAnbnVtYmVyJywgcmVxdWlyZWQ6IGZhbHNlIH0sXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ0RvY2sgRG9vciBBdmFpbGFiaWxpdHknLCB0YXJnZXRGaWVsZDogJ2RvY2tEb29yQXZhaWxhYmlsaXR5JywgZGF0YVR5cGU6ICdudW1iZXInLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICBdLFxuICAgIHJlcXVpcmVkQ29sdW1uczogWydEQyBTcSBGdCcsICdGYWNpbGl0eSBDYXBhY2l0eSddLFxuICAgIG9wdGlvbmFsQ29sdW1uczogWydTdG9yYWdlIFNwYWNlIFV0aWxpemVkJywgJ0RvY2sgRG9vciBBdmFpbGFiaWxpdHknLCAnU0tVIENvdW50IHBlciBEQyddXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnT3JkZXIgJiBQYXltZW50IERhdGEnLFxuICAgIGRlc2NyaXB0aW9uOiAnQ3VzdG9tZXIgb3JkZXJzLCBmcmVpZ2h0IGNsYXNzLCBkZWxpdmVyeSBxdWFudGl0aWVzJyxcbiAgICB0YXJnZXRDYXRlZ29yeTogJ29wZXJhdGlvbmFsUmVwb3J0aW5nJyxcbiAgICB0YXJnZXRTdWJjYXRlZ29yeTogJ29yZGVyUGF5bWVudERhdGEnLFxuICAgIG1hcHBpbmdzOiBbXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ0N1c3RvbWVyIE5hbWUnLCB0YXJnZXRGaWVsZDogJ2N1c3RvbWVyTmFtZScsIGRhdGFUeXBlOiAnc3RyaW5nJywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgIHsgc291cmNlQ29sdW1uOiAnRnJlaWdodCBDbGFzcycsIHRhcmdldEZpZWxkOiAnZnJlaWdodENsYXNzJywgZGF0YVR5cGU6ICdzdHJpbmcnLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgIHsgc291cmNlQ29sdW1uOiAnT3JkZXIgRGVsaXZlcnkgUXVhbnRpdGllcycsIHRhcmdldEZpZWxkOiAnb3JkZXJEZWxpdmVyeVF1YW50aXRpZXMnLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ1NoaXBtZW50IFdlaWdodCcsIHRhcmdldEZpZWxkOiAnc2hpcG1lbnRXZWlnaHQnLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgIF0sXG4gICAgcmVxdWlyZWRDb2x1bW5zOiBbJ0N1c3RvbWVyIE5hbWUnLCAnT3JkZXIgRGVsaXZlcnkgUXVhbnRpdGllcyddLFxuICAgIG9wdGlvbmFsQ29sdW1uczogWydGcmVpZ2h0IENsYXNzJywgJ1NoaXBtZW50IFdlaWdodCcsICdDdXN0b21lciBTaGlwLVRvIFJlZ2lvbiddXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnQ29zdCAmIEZpbmFuY2lhbCBEYXRhJyxcbiAgICBkZXNjcmlwdGlvbjogJ1dhcmVob3VzZSBvcGVyYXRpbmcgY29zdHMsIGxlYXNlIGNvc3RzLCBpbnZlbnRvcnkgY2FycnlpbmcgY29zdHMnLFxuICAgIHRhcmdldENhdGVnb3J5OiAnYnVzaW5lc3NGaW5hbmNpYWxzJyxcbiAgICB0YXJnZXRTdWJjYXRlZ29yeTogJ2Nvc3RGaW5hbmNpYWxEYXRhJyxcbiAgICBtYXBwaW5nczogW1xuICAgICAgeyBzb3VyY2VDb2x1bW46ICdXYXJlaG91c2UgT3BlcmF0aW5nIENvc3QnLCB0YXJnZXRGaWVsZDogJ3dhcmVob3VzZU9wZXJhdGluZ0Nvc3QnLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ0xlYXNlIG9yIFB1cmNoYXNlIENvc3QnLCB0YXJnZXRGaWVsZDogJ2xlYXNlT3JQdXJjaGFzZUNvc3QnLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgICAgeyBzb3VyY2VDb2x1bW46ICdJbnZlbnRvcnkgQ2FycnlpbmcgQ29zdCcsIHRhcmdldEZpZWxkOiAnaW52ZW50b3J5Q2FycnlpbmdDb3N0JywgZGF0YVR5cGU6ICdudW1iZXInLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgIHsgc291cmNlQ29sdW1uOiAnQ2FycmllciBDb3N0JywgdGFyZ2V0RmllbGQ6ICdjYXJyaWVyQ29zdCcsIGRhdGFUeXBlOiAnbnVtYmVyJywgcmVxdWlyZWQ6IGZhbHNlIH0sXG4gICAgXSxcbiAgICByZXF1aXJlZENvbHVtbnM6IFsnV2FyZWhvdXNlIE9wZXJhdGluZyBDb3N0J10sXG4gICAgb3B0aW9uYWxDb2x1bW5zOiBbJ0xlYXNlIG9yIFB1cmNoYXNlIENvc3QnLCAnSW52ZW50b3J5IENhcnJ5aW5nIENvc3QnLCAnQ2FycmllciBDb3N0J11cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdIaXN0b3JpY2FsIFNhbGVzIERhdGEnLFxuICAgIGRlc2NyaXB0aW9uOiAnSGlzdG9yaWNhbCBzYWxlcyBkYXRhLCBjdXN0b21lci1sZXZlbCBkYXRhLCBTS1Ugc2FsZXMgdmVsb2NpdHknLFxuICAgIHRhcmdldENhdGVnb3J5OiAnc2FsZXNHcm93dGhUcmFqZWN0b3J5JyxcbiAgICB0YXJnZXRTdWJjYXRlZ29yeTogJ2hpc3RvcmljYWxTYWxlc0RhdGEnLFxuICAgIG1hcHBpbmdzOiBbXG4gICAgICB7IHNvdXJjZUNvbHVtbjogJ0hpc3RvcmljYWwgU2FsZXMgRGF0YScsIHRhcmdldEZpZWxkOiAnaGlzdG9yaWNhbFNhbGVzRGF0YScsIGRhdGFUeXBlOiAnbnVtYmVyJywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgIHsgc291cmNlQ29sdW1uOiAnU0tVIFNhbGVzIFZlbG9jaXR5JywgdGFyZ2V0RmllbGQ6ICdza3VTYWxlc1ZlbG9jaXR5JywgZGF0YVR5cGU6ICdudW1iZXInLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAgIHsgc291cmNlQ29sdW1uOiAnQ3VzdG9tZXIgT3JkZXIgSGlzdG9yeScsIHRhcmdldEZpZWxkOiAnY3VzdG9tZXJPcmRlckhpc3RvcnknLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgICAgeyBzb3VyY2VDb2x1bW46ICdTS1UgVG90YWwgVmFsdWUnLCB0YXJnZXRGaWVsZDogJ3NrdVRvdGFsVmFsdWUnLCBkYXRhVHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgIF0sXG4gICAgcmVxdWlyZWRDb2x1bW5zOiBbJ0hpc3RvcmljYWwgU2FsZXMgRGF0YSddLFxuICAgIG9wdGlvbmFsQ29sdW1uczogWydTS1UgU2FsZXMgVmVsb2NpdHknLCAnQ3VzdG9tZXIgT3JkZXIgSGlzdG9yeScsICdTS1UgVG90YWwgVmFsdWUnXVxuICB9XG5dO1xuIl0sIm5hbWVzIjpbIkRBVEFfTUFQUElOR19URU1QTEFURVMiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJ0YXJnZXRDYXRlZ29yeSIsInRhcmdldFN1YmNhdGVnb3J5IiwibWFwcGluZ3MiLCJzb3VyY2VDb2x1bW4iLCJ0YXJnZXRGaWVsZCIsImRhdGFUeXBlIiwicmVxdWlyZWQiLCJyZXF1aXJlZENvbHVtbnMiLCJvcHRpb25hbENvbHVtbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./types/data-schema.ts\n");

/***/ })

};
;