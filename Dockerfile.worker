FROM node:18-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Install dependencies
FROM base AS deps
COPY package.json pnpm-lock.yaml* ./
RUN pnpm install --frozen-lockfile --prod

# Build worker
FROM base AS builder
WORKDIR /app
COPY package.json pnpm-lock.yaml* ./
RUN pnpm install --frozen-lockfile
COPY . .

# Build worker application (if you have a separate build process)
# RUN pnpm build:worker

# Production worker image
FROM node:18-alpine AS runner
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 worker

# Copy built worker
COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/types ./types
COPY --from=builder /app/package.json ./package.json

# Create worker script
COPY --from=builder /app/scripts/worker.js ./worker.js

# Create directories
RUN mkdir -p /app/logs /app/temp
RUN chown -R worker:nodejs /app

# Worker optimizations for heavy compute workloads
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=3584 --expose-gc --optimize-for-size"
ENV UV_THREADPOOL_SIZE=16

# Switch to worker user
USER worker

# Health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=3 \
  CMD node -e "process.exit(0)"

# Start worker process
CMD ["node", "worker.js"]
