FROM node:18-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Install dependencies only when needed
FROM base AS deps
# Copy package files
COPY package.json pnpm-lock.yaml* ./
# Install dependencies
RUN pnpm install --frozen-lockfile

# Build the worker
FROM base AS builder
WORKDIR /app
COPY package.json pnpm-lock.yaml* ./
# Install all dependencies (including dev)
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application (this will also build worker components)
RUN pnpm build

# Production image for worker
FROM node:18-alpine AS runner
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 worker

# Copy dependencies and built code
COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Copy the built application (for any shared utilities)
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/lib ./lib
COPY --from builder /app/types ./types

# Create directories for logs
RUN mkdir -p /app/logs
RUN chown -R worker:nodejs /app

# Worker optimizations for heavy compute
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=3584 --expose-gc"
ENV UV_THREADPOOL_SIZE=16

# Switch to non-root user
USER worker

# Health check for workers
HEALTHCHECK --interval=60s --timeout=30s --start-period=30s --retries=3 \
  CMD node -e "console.log('Worker health check passed')" || exit 1

# Start the worker (this will be overridden by docker-compose environment)
CMD ["node", "-e", "console.log('Worker container started. Waiting for worker script...'); setInterval(() => {}, 1000)"]
